ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/rcc.c"
  18              		.section	.text.RCC_LED,"ax",%progbits
  19              		.align	1
  20              		.global	RCC_LED
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	RCC_LED:
  26              	.LFB65:
   1:Core/Src/rcc.c **** /* *
   2:Core/Src/rcc.c **** * @brief    Configuration Clocking of MCU:
   3:Core/Src/rcc.c **** *           -SYSCLK config
   4:Core/Src/rcc.c **** *           -AHB and HCLK config
   5:Core/Src/rcc.c **** *           -APB1, APB2 config
   6:Core/Src/rcc.c ****             -SysTick()
   7:Core/Src/rcc.c ****             -GetTick()
   8:Core/Src/rcc.c ****             
   9:Core/Src/rcc.c ****             Configuration Clocking of others stuff
  10:Core/Src/rcc.c **** */
  11:Core/Src/rcc.c **** #include "stm32f103xb.h"
  12:Core/Src/rcc.c **** #include "rcc.h"
  13:Core/Src/rcc.c **** #include "macro.h"
  14:Core/Src/rcc.c **** #include "system.h"
  15:Core/Src/rcc.c **** 
  16:Core/Src/rcc.c **** #ifndef   HSE_STARTUP_TIMEOUT
  17:Core/Src/rcc.c ****   #define HSE_STARTUP_TIMEOUT   100U     
  18:Core/Src/rcc.c **** #endif
  19:Core/Src/rcc.c **** 
  20:Core/Src/rcc.c **** __IO uint32_t Ticks; /* Amounts of ticks from launch moment*/
  21:Core/Src/rcc.c **** 
  22:Core/Src/rcc.c **** 
  23:Core/Src/rcc.c **** 
  24:Core/Src/rcc.c **** /********* Clocking GPIO module ****************/
  25:Core/Src/rcc.c **** 
  26:Core/Src/rcc.c **** /* Clocking PORT C for LED PIN*/
  27:Core/Src/rcc.c **** void RCC_LED(void)
  28:Core/Src/rcc.c **** {
  27              		.loc 1 28 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 2


  31              		@ link register save eliminated.
  29:Core/Src/rcc.c ****     SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPCEN_Msk); // Input Output Port C Enable clocking
  32              		.loc 1 29 5 view .LVU1
  33 0000 024A     		ldr	r2, .L2
  34 0002 9369     		ldr	r3, [r2, #24]
  35 0004 43F01003 		orr	r3, r3, #16
  36 0008 9361     		str	r3, [r2, #24]
  30:Core/Src/rcc.c **** }
  37              		.loc 1 30 1 is_stmt 0 view .LVU2
  38 000a 7047     		bx	lr
  39              	.L3:
  40              		.align	2
  41              	.L2:
  42 000c 00100240 		.word	1073876992
  43              		.cfi_endproc
  44              	.LFE65:
  46              		.section	.text.SysTickInit,"ax",%progbits
  47              		.align	1
  48              		.global	SysTickInit
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  53              	SysTickInit:
  54              	.LVL0:
  55              	.LFB67:
  31:Core/Src/rcc.c **** 
  32:Core/Src/rcc.c **** 
  33:Core/Src/rcc.c **** 
  34:Core/Src/rcc.c **** 
  35:Core/Src/rcc.c **** /* SystemClockConfig function. 
  36:Core/Src/rcc.c ****  * @brief: 
  37:Core/Src/rcc.c ****  * Clocking SYSCLK, AHB, APB1, APB2
  38:Core/Src/rcc.c ****  * Init SysTick
  39:Core/Src/rcc.c ****  *    -SysTick interrupt every 1 millisecond call IncTick.
  40:Core/Src/rcc.c ****  *    -HSE = 8 Mhz
  41:Core/Src/rcc.c ****  *    -PLL = x9
  42:Core/Src/rcc.c ****  *    -Freq SYSCLK = HSE - 72 MHz
  43:Core/Src/rcc.c ****  *    -AHB = 72 Mhz
  44:Core/Src/rcc.c ****  *    -APB1 = 72 Mhz, APB2 = 36 Mhz;
  45:Core/Src/rcc.c ****  *    -FLASH LATENCY = 2
  46:Core/Src/rcc.c ****  */
  47:Core/Src/rcc.c **** void SystemClockConfig(void)
  48:Core/Src/rcc.c **** {
  49:Core/Src/rcc.c ****   #define AMNT_DIV 1000UL   /* Divider of the freq SysTick. equal to amnt counts in 1 sec */
  50:Core/Src/rcc.c **** 
  51:Core/Src/rcc.c ****   SystemCoreClockUpdate();
  52:Core/Src/rcc.c ****   SysTickInit(AMNT_DIV);    /* Start of SysTick with CoreClock value */
  53:Core/Src/rcc.c **** 
  54:Core/Src/rcc.c ****   /* FLASH Latency*/
  55:Core/Src/rcc.c ****   SET_BIT(FLASH->ACR, FLASH_ACR_LATENCY_2);
  56:Core/Src/rcc.c **** 
  57:Core/Src/rcc.c ****   /* HSE Setting */
  58:Core/Src/rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSEON_Msk); //HSE = 8 Mhz
  59:Core/Src/rcc.c **** 
  60:Core/Src/rcc.c ****   /* Delay for turning on HSE */
  61:Core/Src/rcc.c ****   uint32_t tick = GetTick();
  62:Core/Src/rcc.c ****   while(READ_BIT(RCC->CR, RCC_CR_HSERDY_Msk) == 0)
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 3


  63:Core/Src/rcc.c ****   {
  64:Core/Src/rcc.c ****     if (GetTick() - tick > HSE_STARTUP_TIMEOUT )
  65:Core/Src/rcc.c ****     { 
  66:Core/Src/rcc.c ****       break; //Timeout
  67:Core/Src/rcc.c ****     }
  68:Core/Src/rcc.c ****   }
  69:Core/Src/rcc.c ****   
  70:Core/Src/rcc.c ****   /* PLL and buses setting  */
  71:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE_HSE); // :1 in PLLXTRPE
  72:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PLLMULL9_Msk); //PLL x 9, Freq sys = 8Mhz x 9 = 72
  73:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PLLSRC_Msk);   //PLL source HSE
  74:Core/Src/rcc.c **** 
  75:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_HPRE_DIV1);    //AHB Prescaler = 1
  76:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PPRE1_DIV2);   //APB1 Prescaler = 2 
  77:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PPRE2_DIV1);   //APB2 Prescaler = 1y
  78:Core/Src/rcc.c **** 
  79:Core/Src/rcc.c ****   
  80:Core/Src/rcc.c ****   /* PLL ON and SYSCKL Setting */
  81:Core/Src/rcc.c ****   SET_BIT(RCC->CR, RCC_CR_PLLON_Msk);      //PLL On
  82:Core/Src/rcc.c ****   while(!READ_BIT(RCC->CR, RCC_CR_PLLRDY_Msk)); //waiting
  83:Core/Src/rcc.c **** 
  84:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_SW_PLL);     //Switch Switcher to PLL */
  85:Core/Src/rcc.c **** 
  86:Core/Src/rcc.c **** 
  87:Core/Src/rcc.c ****   SystemCoreClockUpdate();
  88:Core/Src/rcc.c ****   SysTickInit(AMNT_DIV);  /* Refresh of SysTick frequency */
  89:Core/Src/rcc.c **** }
  90:Core/Src/rcc.c **** 
  91:Core/Src/rcc.c **** 
  92:Core/Src/rcc.c **** 
  93:Core/Src/rcc.c **** 
  94:Core/Src/rcc.c **** /*  */
  95:Core/Src/rcc.c **** uint16_t SysTickInit(uint32_t amnt)
  96:Core/Src/rcc.c **** {
  56              		.loc 1 96 1 is_stmt 1 view -0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		.loc 1 96 1 is_stmt 0 view .LVU4
  61 0000 08B5     		push	{r3, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 3, -8
  65              		.cfi_offset 14, -4
  97:Core/Src/rcc.c ****   if (SysTick_Config( SystemCoreClock / amnt ) == !0) /* Freq in Mhz.  Hz is amnt/sec.  amnt = how 
  66              		.loc 1 97 3 is_stmt 1 view .LVU5
  67              		.loc 1 97 7 is_stmt 0 view .LVU6
  68 0002 0C4B     		ldr	r3, .L9
  69 0004 1B68     		ldr	r3, [r3]
  70 0006 B3FBF0F0 		udiv	r0, r3, r0
  71              	.LVL1:
  72              	.LBB9:
  73              	.LBI9:
  74              		.file 2 "Core/Inc/core_cm3.h"
   1:Core/Inc/core_cm3.h **** /**************************************************************************//**
   2:Core/Inc/core_cm3.h ****  * @file     core_cm3.h
   3:Core/Inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 4


   4:Core/Inc/core_cm3.h ****  * @version  V5.0.8
   5:Core/Inc/core_cm3.h ****  * @date     04. June 2018
   6:Core/Inc/core_cm3.h ****  ******************************************************************************/
   7:Core/Inc/core_cm3.h **** /*
   8:Core/Inc/core_cm3.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Core/Inc/core_cm3.h ****  *
  10:Core/Inc/core_cm3.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Core/Inc/core_cm3.h ****  *
  12:Core/Inc/core_cm3.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Core/Inc/core_cm3.h ****  * not use this file except in compliance with the License.
  14:Core/Inc/core_cm3.h ****  * You may obtain a copy of the License at
  15:Core/Inc/core_cm3.h ****  *
  16:Core/Inc/core_cm3.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Core/Inc/core_cm3.h ****  *
  18:Core/Inc/core_cm3.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Core/Inc/core_cm3.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Core/Inc/core_cm3.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Core/Inc/core_cm3.h ****  * See the License for the specific language governing permissions and
  22:Core/Inc/core_cm3.h ****  * limitations under the License.
  23:Core/Inc/core_cm3.h ****  */
  24:Core/Inc/core_cm3.h **** 
  25:Core/Inc/core_cm3.h **** #if   defined ( __ICCARM__ )
  26:Core/Inc/core_cm3.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Core/Inc/core_cm3.h **** #elif defined (__clang__)
  28:Core/Inc/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Core/Inc/core_cm3.h **** #endif
  30:Core/Inc/core_cm3.h **** 
  31:Core/Inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:Core/Inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:Core/Inc/core_cm3.h **** 
  34:Core/Inc/core_cm3.h **** #include <stdint.h>
  35:Core/Inc/core_cm3.h **** 
  36:Core/Inc/core_cm3.h **** #ifdef __cplusplus
  37:Core/Inc/core_cm3.h ****  extern "C" {
  38:Core/Inc/core_cm3.h **** #endif
  39:Core/Inc/core_cm3.h **** 
  40:Core/Inc/core_cm3.h **** /**
  41:Core/Inc/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Core/Inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Core/Inc/core_cm3.h **** 
  44:Core/Inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Core/Inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Core/Inc/core_cm3.h **** 
  47:Core/Inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Core/Inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  49:Core/Inc/core_cm3.h **** 
  50:Core/Inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Core/Inc/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  52:Core/Inc/core_cm3.h ****  */
  53:Core/Inc/core_cm3.h **** 
  54:Core/Inc/core_cm3.h **** 
  55:Core/Inc/core_cm3.h **** /*******************************************************************************
  56:Core/Inc/core_cm3.h ****  *                 CMSIS definitions
  57:Core/Inc/core_cm3.h ****  ******************************************************************************/
  58:Core/Inc/core_cm3.h **** /**
  59:Core/Inc/core_cm3.h ****   \ingroup Cortex_M3
  60:Core/Inc/core_cm3.h ****   @{
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 5


  61:Core/Inc/core_cm3.h ****  */
  62:Core/Inc/core_cm3.h **** 
  63:Core/Inc/core_cm3.h **** #include "cmsis_version.h"
  64:Core/Inc/core_cm3.h **** 
  65:Core/Inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  66:Core/Inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Core/Inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Core/Inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  69:Core/Inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Core/Inc/core_cm3.h **** 
  71:Core/Inc/core_cm3.h **** #define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
  72:Core/Inc/core_cm3.h **** 
  73:Core/Inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Core/Inc/core_cm3.h ****     This core does not support an FPU at all
  75:Core/Inc/core_cm3.h **** */
  76:Core/Inc/core_cm3.h **** #define __FPU_USED       0U
  77:Core/Inc/core_cm3.h **** 
  78:Core/Inc/core_cm3.h **** #if defined ( __CC_ARM )
  79:Core/Inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  80:Core/Inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Core/Inc/core_cm3.h ****   #endif
  82:Core/Inc/core_cm3.h **** 
  83:Core/Inc/core_cm3.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Core/Inc/core_cm3.h ****   #if defined __ARM_PCS_VFP
  85:Core/Inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Core/Inc/core_cm3.h ****   #endif
  87:Core/Inc/core_cm3.h **** 
  88:Core/Inc/core_cm3.h **** #elif defined ( __GNUC__ )
  89:Core/Inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Core/Inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Core/Inc/core_cm3.h ****   #endif
  92:Core/Inc/core_cm3.h **** 
  93:Core/Inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  94:Core/Inc/core_cm3.h ****   #if defined __ARMVFP__
  95:Core/Inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Core/Inc/core_cm3.h ****   #endif
  97:Core/Inc/core_cm3.h **** 
  98:Core/Inc/core_cm3.h **** #elif defined ( __TI_ARM__ )
  99:Core/Inc/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 100:Core/Inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Core/Inc/core_cm3.h ****   #endif
 102:Core/Inc/core_cm3.h **** 
 103:Core/Inc/core_cm3.h **** #elif defined ( __TASKING__ )
 104:Core/Inc/core_cm3.h ****   #if defined __FPU_VFP__
 105:Core/Inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Core/Inc/core_cm3.h ****   #endif
 107:Core/Inc/core_cm3.h **** 
 108:Core/Inc/core_cm3.h **** #elif defined ( __CSMC__ )
 109:Core/Inc/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 110:Core/Inc/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Core/Inc/core_cm3.h ****   #endif
 112:Core/Inc/core_cm3.h **** 
 113:Core/Inc/core_cm3.h **** #endif
 114:Core/Inc/core_cm3.h **** 
 115:Core/Inc/core_cm3.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Core/Inc/core_cm3.h **** 
 117:Core/Inc/core_cm3.h **** 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 6


 118:Core/Inc/core_cm3.h **** #ifdef __cplusplus
 119:Core/Inc/core_cm3.h **** }
 120:Core/Inc/core_cm3.h **** #endif
 121:Core/Inc/core_cm3.h **** 
 122:Core/Inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:Core/Inc/core_cm3.h **** 
 124:Core/Inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:Core/Inc/core_cm3.h **** 
 126:Core/Inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:Core/Inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:Core/Inc/core_cm3.h **** 
 129:Core/Inc/core_cm3.h **** #ifdef __cplusplus
 130:Core/Inc/core_cm3.h ****  extern "C" {
 131:Core/Inc/core_cm3.h **** #endif
 132:Core/Inc/core_cm3.h **** 
 133:Core/Inc/core_cm3.h **** /* check device defines and use defaults */
 134:Core/Inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Core/Inc/core_cm3.h ****   #ifndef __CM3_REV
 136:Core/Inc/core_cm3.h ****     #define __CM3_REV               0x0200U
 137:Core/Inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 138:Core/Inc/core_cm3.h ****   #endif
 139:Core/Inc/core_cm3.h **** 
 140:Core/Inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 141:Core/Inc/core_cm3.h ****     #define __MPU_PRESENT             0U
 142:Core/Inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Core/Inc/core_cm3.h ****   #endif
 144:Core/Inc/core_cm3.h **** 
 145:Core/Inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 146:Core/Inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          3U
 147:Core/Inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 148:Core/Inc/core_cm3.h ****   #endif
 149:Core/Inc/core_cm3.h **** 
 150:Core/Inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 151:Core/Inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 152:Core/Inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 153:Core/Inc/core_cm3.h ****   #endif
 154:Core/Inc/core_cm3.h **** #endif
 155:Core/Inc/core_cm3.h **** 
 156:Core/Inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 157:Core/Inc/core_cm3.h **** /**
 158:Core/Inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 159:Core/Inc/core_cm3.h **** 
 160:Core/Inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 161:Core/Inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 162:Core/Inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 163:Core/Inc/core_cm3.h **** */
 164:Core/Inc/core_cm3.h **** #ifdef __cplusplus
 165:Core/Inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 166:Core/Inc/core_cm3.h **** #else
 167:Core/Inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 168:Core/Inc/core_cm3.h **** #endif
 169:Core/Inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 170:Core/Inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 171:Core/Inc/core_cm3.h **** 
 172:Core/Inc/core_cm3.h **** /* following defines should be used for structure members */
 173:Core/Inc/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 174:Core/Inc/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 7


 175:Core/Inc/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 176:Core/Inc/core_cm3.h **** 
 177:Core/Inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 178:Core/Inc/core_cm3.h **** 
 179:Core/Inc/core_cm3.h **** 
 180:Core/Inc/core_cm3.h **** 
 181:Core/Inc/core_cm3.h **** /*******************************************************************************
 182:Core/Inc/core_cm3.h ****  *                 Register Abstraction
 183:Core/Inc/core_cm3.h ****   Core Register contain:
 184:Core/Inc/core_cm3.h ****   - Core Register
 185:Core/Inc/core_cm3.h ****   - Core NVIC Register
 186:Core/Inc/core_cm3.h ****   - Core SCB Register
 187:Core/Inc/core_cm3.h ****   - Core SysTick Register
 188:Core/Inc/core_cm3.h ****   - Core Debug Register
 189:Core/Inc/core_cm3.h ****   - Core MPU Register
 190:Core/Inc/core_cm3.h ****  ******************************************************************************/
 191:Core/Inc/core_cm3.h **** /**
 192:Core/Inc/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 193:Core/Inc/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 194:Core/Inc/core_cm3.h **** */
 195:Core/Inc/core_cm3.h **** 
 196:Core/Inc/core_cm3.h **** /**
 197:Core/Inc/core_cm3.h ****   \ingroup    CMSIS_core_register
 198:Core/Inc/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 199:Core/Inc/core_cm3.h ****   \brief      Core Register type definitions.
 200:Core/Inc/core_cm3.h ****   @{
 201:Core/Inc/core_cm3.h ****  */
 202:Core/Inc/core_cm3.h **** 
 203:Core/Inc/core_cm3.h **** /**
 204:Core/Inc/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 205:Core/Inc/core_cm3.h ****  */
 206:Core/Inc/core_cm3.h **** typedef union
 207:Core/Inc/core_cm3.h **** {
 208:Core/Inc/core_cm3.h ****   struct
 209:Core/Inc/core_cm3.h ****   {
 210:Core/Inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 211:Core/Inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 212:Core/Inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 213:Core/Inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 214:Core/Inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 215:Core/Inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 216:Core/Inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 217:Core/Inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 218:Core/Inc/core_cm3.h **** } APSR_Type;
 219:Core/Inc/core_cm3.h **** 
 220:Core/Inc/core_cm3.h **** /* APSR Register Definitions */
 221:Core/Inc/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 222:Core/Inc/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 223:Core/Inc/core_cm3.h **** 
 224:Core/Inc/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 225:Core/Inc/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 226:Core/Inc/core_cm3.h **** 
 227:Core/Inc/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 228:Core/Inc/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 229:Core/Inc/core_cm3.h **** 
 230:Core/Inc/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 231:Core/Inc/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 8


 232:Core/Inc/core_cm3.h **** 
 233:Core/Inc/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 234:Core/Inc/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 235:Core/Inc/core_cm3.h **** 
 236:Core/Inc/core_cm3.h **** 
 237:Core/Inc/core_cm3.h **** /**
 238:Core/Inc/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Core/Inc/core_cm3.h ****  */
 240:Core/Inc/core_cm3.h **** typedef union
 241:Core/Inc/core_cm3.h **** {
 242:Core/Inc/core_cm3.h ****   struct
 243:Core/Inc/core_cm3.h ****   {
 244:Core/Inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Core/Inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Core/Inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Core/Inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Core/Inc/core_cm3.h **** } IPSR_Type;
 249:Core/Inc/core_cm3.h **** 
 250:Core/Inc/core_cm3.h **** /* IPSR Register Definitions */
 251:Core/Inc/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Core/Inc/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Core/Inc/core_cm3.h **** 
 254:Core/Inc/core_cm3.h **** 
 255:Core/Inc/core_cm3.h **** /**
 256:Core/Inc/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Core/Inc/core_cm3.h ****  */
 258:Core/Inc/core_cm3.h **** typedef union
 259:Core/Inc/core_cm3.h **** {
 260:Core/Inc/core_cm3.h ****   struct
 261:Core/Inc/core_cm3.h ****   {
 262:Core/Inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Core/Inc/core_cm3.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 264:Core/Inc/core_cm3.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 265:Core/Inc/core_cm3.h ****     uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
 266:Core/Inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 267:Core/Inc/core_cm3.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 268:Core/Inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 269:Core/Inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 270:Core/Inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 271:Core/Inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 272:Core/Inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 273:Core/Inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 274:Core/Inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 275:Core/Inc/core_cm3.h **** } xPSR_Type;
 276:Core/Inc/core_cm3.h **** 
 277:Core/Inc/core_cm3.h **** /* xPSR Register Definitions */
 278:Core/Inc/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 279:Core/Inc/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 280:Core/Inc/core_cm3.h **** 
 281:Core/Inc/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 282:Core/Inc/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 283:Core/Inc/core_cm3.h **** 
 284:Core/Inc/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 285:Core/Inc/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 286:Core/Inc/core_cm3.h **** 
 287:Core/Inc/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 288:Core/Inc/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 9


 289:Core/Inc/core_cm3.h **** 
 290:Core/Inc/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 291:Core/Inc/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 292:Core/Inc/core_cm3.h **** 
 293:Core/Inc/core_cm3.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 294:Core/Inc/core_cm3.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 295:Core/Inc/core_cm3.h **** 
 296:Core/Inc/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 297:Core/Inc/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 298:Core/Inc/core_cm3.h **** 
 299:Core/Inc/core_cm3.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 300:Core/Inc/core_cm3.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 301:Core/Inc/core_cm3.h **** 
 302:Core/Inc/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 303:Core/Inc/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 304:Core/Inc/core_cm3.h **** 
 305:Core/Inc/core_cm3.h **** 
 306:Core/Inc/core_cm3.h **** /**
 307:Core/Inc/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 308:Core/Inc/core_cm3.h ****  */
 309:Core/Inc/core_cm3.h **** typedef union
 310:Core/Inc/core_cm3.h **** {
 311:Core/Inc/core_cm3.h ****   struct
 312:Core/Inc/core_cm3.h ****   {
 313:Core/Inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 314:Core/Inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 315:Core/Inc/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 316:Core/Inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 317:Core/Inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 318:Core/Inc/core_cm3.h **** } CONTROL_Type;
 319:Core/Inc/core_cm3.h **** 
 320:Core/Inc/core_cm3.h **** /* CONTROL Register Definitions */
 321:Core/Inc/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 322:Core/Inc/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 323:Core/Inc/core_cm3.h **** 
 324:Core/Inc/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 325:Core/Inc/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 326:Core/Inc/core_cm3.h **** 
 327:Core/Inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 328:Core/Inc/core_cm3.h **** 
 329:Core/Inc/core_cm3.h **** 
 330:Core/Inc/core_cm3.h **** /**
 331:Core/Inc/core_cm3.h ****   \ingroup    CMSIS_core_register
 332:Core/Inc/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 333:Core/Inc/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 334:Core/Inc/core_cm3.h ****   @{
 335:Core/Inc/core_cm3.h ****  */
 336:Core/Inc/core_cm3.h **** 
 337:Core/Inc/core_cm3.h **** /**
 338:Core/Inc/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 339:Core/Inc/core_cm3.h ****  */
 340:Core/Inc/core_cm3.h **** typedef struct
 341:Core/Inc/core_cm3.h **** {
 342:Core/Inc/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 343:Core/Inc/core_cm3.h ****         uint32_t RESERVED0[24U];
 344:Core/Inc/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 345:Core/Inc/core_cm3.h ****         uint32_t RSERVED1[24U];
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 10


 346:Core/Inc/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 347:Core/Inc/core_cm3.h ****         uint32_t RESERVED2[24U];
 348:Core/Inc/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 349:Core/Inc/core_cm3.h ****         uint32_t RESERVED3[24U];
 350:Core/Inc/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 351:Core/Inc/core_cm3.h ****         uint32_t RESERVED4[56U];
 352:Core/Inc/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 353:Core/Inc/core_cm3.h ****         uint32_t RESERVED5[644U];
 354:Core/Inc/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 355:Core/Inc/core_cm3.h **** }  NVIC_Type;
 356:Core/Inc/core_cm3.h **** 
 357:Core/Inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 358:Core/Inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 359:Core/Inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 360:Core/Inc/core_cm3.h **** 
 361:Core/Inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 362:Core/Inc/core_cm3.h **** 
 363:Core/Inc/core_cm3.h **** 
 364:Core/Inc/core_cm3.h **** /**
 365:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 366:Core/Inc/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 367:Core/Inc/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 368:Core/Inc/core_cm3.h ****   @{
 369:Core/Inc/core_cm3.h ****  */
 370:Core/Inc/core_cm3.h **** 
 371:Core/Inc/core_cm3.h **** /**
 372:Core/Inc/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 373:Core/Inc/core_cm3.h ****  */
 374:Core/Inc/core_cm3.h **** typedef struct
 375:Core/Inc/core_cm3.h **** {
 376:Core/Inc/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 377:Core/Inc/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 378:Core/Inc/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 379:Core/Inc/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 380:Core/Inc/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 381:Core/Inc/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 382:Core/Inc/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 383:Core/Inc/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 384:Core/Inc/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 385:Core/Inc/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 386:Core/Inc/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 387:Core/Inc/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 388:Core/Inc/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 389:Core/Inc/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 390:Core/Inc/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 391:Core/Inc/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 392:Core/Inc/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 393:Core/Inc/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 394:Core/Inc/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 395:Core/Inc/core_cm3.h ****         uint32_t RESERVED0[5U];
 396:Core/Inc/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 397:Core/Inc/core_cm3.h **** } SCB_Type;
 398:Core/Inc/core_cm3.h **** 
 399:Core/Inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 400:Core/Inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 401:Core/Inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 402:Core/Inc/core_cm3.h **** 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 11


 403:Core/Inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 404:Core/Inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 405:Core/Inc/core_cm3.h **** 
 406:Core/Inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 407:Core/Inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 408:Core/Inc/core_cm3.h **** 
 409:Core/Inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 410:Core/Inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 411:Core/Inc/core_cm3.h **** 
 412:Core/Inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 413:Core/Inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 414:Core/Inc/core_cm3.h **** 
 415:Core/Inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 416:Core/Inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 417:Core/Inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 418:Core/Inc/core_cm3.h **** 
 419:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 420:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 421:Core/Inc/core_cm3.h **** 
 422:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 423:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 424:Core/Inc/core_cm3.h **** 
 425:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 426:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 427:Core/Inc/core_cm3.h **** 
 428:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 429:Core/Inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 430:Core/Inc/core_cm3.h **** 
 431:Core/Inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 432:Core/Inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 433:Core/Inc/core_cm3.h **** 
 434:Core/Inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 435:Core/Inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 436:Core/Inc/core_cm3.h **** 
 437:Core/Inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 438:Core/Inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 439:Core/Inc/core_cm3.h **** 
 440:Core/Inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 441:Core/Inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 442:Core/Inc/core_cm3.h **** 
 443:Core/Inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Core/Inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Core/Inc/core_cm3.h **** 
 446:Core/Inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 447:Core/Inc/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
 448:Core/Inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 449:Core/Inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 450:Core/Inc/core_cm3.h **** 
 451:Core/Inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 452:Core/Inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 453:Core/Inc/core_cm3.h **** #else
 454:Core/Inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 455:Core/Inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 456:Core/Inc/core_cm3.h **** #endif
 457:Core/Inc/core_cm3.h **** 
 458:Core/Inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 459:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 12


 460:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 461:Core/Inc/core_cm3.h **** 
 462:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 463:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 464:Core/Inc/core_cm3.h **** 
 465:Core/Inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 466:Core/Inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 467:Core/Inc/core_cm3.h **** 
 468:Core/Inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 469:Core/Inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 470:Core/Inc/core_cm3.h **** 
 471:Core/Inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 472:Core/Inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 473:Core/Inc/core_cm3.h **** 
 474:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 475:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 476:Core/Inc/core_cm3.h **** 
 477:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 478:Core/Inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 479:Core/Inc/core_cm3.h **** 
 480:Core/Inc/core_cm3.h **** /* SCB System Control Register Definitions */
 481:Core/Inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 482:Core/Inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 483:Core/Inc/core_cm3.h **** 
 484:Core/Inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 485:Core/Inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 486:Core/Inc/core_cm3.h **** 
 487:Core/Inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 488:Core/Inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 489:Core/Inc/core_cm3.h **** 
 490:Core/Inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 491:Core/Inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 492:Core/Inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 493:Core/Inc/core_cm3.h **** 
 494:Core/Inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 495:Core/Inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 496:Core/Inc/core_cm3.h **** 
 497:Core/Inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 498:Core/Inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 499:Core/Inc/core_cm3.h **** 
 500:Core/Inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 501:Core/Inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 502:Core/Inc/core_cm3.h **** 
 503:Core/Inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 504:Core/Inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 505:Core/Inc/core_cm3.h **** 
 506:Core/Inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 507:Core/Inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 508:Core/Inc/core_cm3.h **** 
 509:Core/Inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 510:Core/Inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 511:Core/Inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 512:Core/Inc/core_cm3.h **** 
 513:Core/Inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 514:Core/Inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 515:Core/Inc/core_cm3.h **** 
 516:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 13


 517:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 518:Core/Inc/core_cm3.h **** 
 519:Core/Inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 520:Core/Inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 521:Core/Inc/core_cm3.h **** 
 522:Core/Inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 523:Core/Inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 524:Core/Inc/core_cm3.h **** 
 525:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 526:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 527:Core/Inc/core_cm3.h **** 
 528:Core/Inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 529:Core/Inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 530:Core/Inc/core_cm3.h **** 
 531:Core/Inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 532:Core/Inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 533:Core/Inc/core_cm3.h **** 
 534:Core/Inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 535:Core/Inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 536:Core/Inc/core_cm3.h **** 
 537:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 538:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 539:Core/Inc/core_cm3.h **** 
 540:Core/Inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 541:Core/Inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 542:Core/Inc/core_cm3.h **** 
 543:Core/Inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 544:Core/Inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 545:Core/Inc/core_cm3.h **** 
 546:Core/Inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 547:Core/Inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 548:Core/Inc/core_cm3.h **** 
 549:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 550:Core/Inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 551:Core/Inc/core_cm3.h **** 
 552:Core/Inc/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 553:Core/Inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 554:Core/Inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 555:Core/Inc/core_cm3.h **** 
 556:Core/Inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 557:Core/Inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 558:Core/Inc/core_cm3.h **** 
 559:Core/Inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 560:Core/Inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 561:Core/Inc/core_cm3.h **** 
 562:Core/Inc/core_cm3.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 563:Core/Inc/core_cm3.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 564:Core/Inc/core_cm3.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 565:Core/Inc/core_cm3.h **** 
 566:Core/Inc/core_cm3.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 567:Core/Inc/core_cm3.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 568:Core/Inc/core_cm3.h **** 
 569:Core/Inc/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 570:Core/Inc/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 571:Core/Inc/core_cm3.h **** 
 572:Core/Inc/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 573:Core/Inc/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 14


 574:Core/Inc/core_cm3.h **** 
 575:Core/Inc/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 576:Core/Inc/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 577:Core/Inc/core_cm3.h **** 
 578:Core/Inc/core_cm3.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 579:Core/Inc/core_cm3.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 580:Core/Inc/core_cm3.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 581:Core/Inc/core_cm3.h **** 
 582:Core/Inc/core_cm3.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 583:Core/Inc/core_cm3.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 584:Core/Inc/core_cm3.h **** 
 585:Core/Inc/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 586:Core/Inc/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 587:Core/Inc/core_cm3.h **** 
 588:Core/Inc/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 589:Core/Inc/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 590:Core/Inc/core_cm3.h **** 
 591:Core/Inc/core_cm3.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 592:Core/Inc/core_cm3.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 593:Core/Inc/core_cm3.h **** 
 594:Core/Inc/core_cm3.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 595:Core/Inc/core_cm3.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 596:Core/Inc/core_cm3.h **** 
 597:Core/Inc/core_cm3.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 598:Core/Inc/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 599:Core/Inc/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 600:Core/Inc/core_cm3.h **** 
 601:Core/Inc/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 602:Core/Inc/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 603:Core/Inc/core_cm3.h **** 
 604:Core/Inc/core_cm3.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 605:Core/Inc/core_cm3.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 606:Core/Inc/core_cm3.h **** 
 607:Core/Inc/core_cm3.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 608:Core/Inc/core_cm3.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 609:Core/Inc/core_cm3.h **** 
 610:Core/Inc/core_cm3.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 611:Core/Inc/core_cm3.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 612:Core/Inc/core_cm3.h **** 
 613:Core/Inc/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 614:Core/Inc/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 615:Core/Inc/core_cm3.h **** 
 616:Core/Inc/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 617:Core/Inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 618:Core/Inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 619:Core/Inc/core_cm3.h **** 
 620:Core/Inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 621:Core/Inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 622:Core/Inc/core_cm3.h **** 
 623:Core/Inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 624:Core/Inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 625:Core/Inc/core_cm3.h **** 
 626:Core/Inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 627:Core/Inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 628:Core/Inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 629:Core/Inc/core_cm3.h **** 
 630:Core/Inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 15


 631:Core/Inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 632:Core/Inc/core_cm3.h **** 
 633:Core/Inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 634:Core/Inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 635:Core/Inc/core_cm3.h **** 
 636:Core/Inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 637:Core/Inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 638:Core/Inc/core_cm3.h **** 
 639:Core/Inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 640:Core/Inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 641:Core/Inc/core_cm3.h **** 
 642:Core/Inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 643:Core/Inc/core_cm3.h **** 
 644:Core/Inc/core_cm3.h **** 
 645:Core/Inc/core_cm3.h **** /**
 646:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 647:Core/Inc/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 648:Core/Inc/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 649:Core/Inc/core_cm3.h ****   @{
 650:Core/Inc/core_cm3.h ****  */
 651:Core/Inc/core_cm3.h **** 
 652:Core/Inc/core_cm3.h **** /**
 653:Core/Inc/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 654:Core/Inc/core_cm3.h ****  */
 655:Core/Inc/core_cm3.h **** typedef struct
 656:Core/Inc/core_cm3.h **** {
 657:Core/Inc/core_cm3.h ****         uint32_t RESERVED0[1U];
 658:Core/Inc/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 659:Core/Inc/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
 660:Core/Inc/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 661:Core/Inc/core_cm3.h **** #else
 662:Core/Inc/core_cm3.h ****         uint32_t RESERVED1[1U];
 663:Core/Inc/core_cm3.h **** #endif
 664:Core/Inc/core_cm3.h **** } SCnSCB_Type;
 665:Core/Inc/core_cm3.h **** 
 666:Core/Inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 667:Core/Inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 668:Core/Inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 669:Core/Inc/core_cm3.h **** 
 670:Core/Inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 671:Core/Inc/core_cm3.h **** 
 672:Core/Inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 673:Core/Inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 674:Core/Inc/core_cm3.h **** 
 675:Core/Inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 676:Core/Inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 677:Core/Inc/core_cm3.h **** 
 678:Core/Inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 679:Core/Inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 680:Core/Inc/core_cm3.h **** 
 681:Core/Inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 682:Core/Inc/core_cm3.h **** 
 683:Core/Inc/core_cm3.h **** 
 684:Core/Inc/core_cm3.h **** /**
 685:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 686:Core/Inc/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 687:Core/Inc/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 16


 688:Core/Inc/core_cm3.h ****   @{
 689:Core/Inc/core_cm3.h ****  */
 690:Core/Inc/core_cm3.h **** 
 691:Core/Inc/core_cm3.h **** /**
 692:Core/Inc/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 693:Core/Inc/core_cm3.h ****  */
 694:Core/Inc/core_cm3.h **** typedef struct
 695:Core/Inc/core_cm3.h **** {
 696:Core/Inc/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 697:Core/Inc/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 698:Core/Inc/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 699:Core/Inc/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 700:Core/Inc/core_cm3.h **** } SysTick_Type;
 701:Core/Inc/core_cm3.h **** 
 702:Core/Inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 703:Core/Inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 704:Core/Inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 705:Core/Inc/core_cm3.h **** 
 706:Core/Inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 707:Core/Inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 708:Core/Inc/core_cm3.h **** 
 709:Core/Inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 710:Core/Inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 711:Core/Inc/core_cm3.h **** 
 712:Core/Inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 713:Core/Inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 714:Core/Inc/core_cm3.h **** 
 715:Core/Inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 716:Core/Inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 717:Core/Inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 718:Core/Inc/core_cm3.h **** 
 719:Core/Inc/core_cm3.h **** /* SysTick Current Register Definitions */
 720:Core/Inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 721:Core/Inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 722:Core/Inc/core_cm3.h **** 
 723:Core/Inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 724:Core/Inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 725:Core/Inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 726:Core/Inc/core_cm3.h **** 
 727:Core/Inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 728:Core/Inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 729:Core/Inc/core_cm3.h **** 
 730:Core/Inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 731:Core/Inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 732:Core/Inc/core_cm3.h **** 
 733:Core/Inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 734:Core/Inc/core_cm3.h **** 
 735:Core/Inc/core_cm3.h **** 
 736:Core/Inc/core_cm3.h **** /**
 737:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 738:Core/Inc/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 739:Core/Inc/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 740:Core/Inc/core_cm3.h ****   @{
 741:Core/Inc/core_cm3.h ****  */
 742:Core/Inc/core_cm3.h **** 
 743:Core/Inc/core_cm3.h **** /**
 744:Core/Inc/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 17


 745:Core/Inc/core_cm3.h ****  */
 746:Core/Inc/core_cm3.h **** typedef struct
 747:Core/Inc/core_cm3.h **** {
 748:Core/Inc/core_cm3.h ****   __OM  union
 749:Core/Inc/core_cm3.h ****   {
 750:Core/Inc/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 751:Core/Inc/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 752:Core/Inc/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 753:Core/Inc/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 754:Core/Inc/core_cm3.h ****         uint32_t RESERVED0[864U];
 755:Core/Inc/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 756:Core/Inc/core_cm3.h ****         uint32_t RESERVED1[15U];
 757:Core/Inc/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 758:Core/Inc/core_cm3.h ****         uint32_t RESERVED2[15U];
 759:Core/Inc/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 760:Core/Inc/core_cm3.h ****         uint32_t RESERVED3[29U];
 761:Core/Inc/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 762:Core/Inc/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 763:Core/Inc/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 764:Core/Inc/core_cm3.h ****         uint32_t RESERVED4[43U];
 765:Core/Inc/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 766:Core/Inc/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 767:Core/Inc/core_cm3.h ****         uint32_t RESERVED5[6U];
 768:Core/Inc/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 769:Core/Inc/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 770:Core/Inc/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 771:Core/Inc/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 772:Core/Inc/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 773:Core/Inc/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 774:Core/Inc/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 775:Core/Inc/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 776:Core/Inc/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 777:Core/Inc/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 778:Core/Inc/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 779:Core/Inc/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 780:Core/Inc/core_cm3.h **** } ITM_Type;
 781:Core/Inc/core_cm3.h **** 
 782:Core/Inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 783:Core/Inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 784:Core/Inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 785:Core/Inc/core_cm3.h **** 
 786:Core/Inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 787:Core/Inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 788:Core/Inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 789:Core/Inc/core_cm3.h **** 
 790:Core/Inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 791:Core/Inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 792:Core/Inc/core_cm3.h **** 
 793:Core/Inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 794:Core/Inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 795:Core/Inc/core_cm3.h **** 
 796:Core/Inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 797:Core/Inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 798:Core/Inc/core_cm3.h **** 
 799:Core/Inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 800:Core/Inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 801:Core/Inc/core_cm3.h **** 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 18


 802:Core/Inc/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 803:Core/Inc/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 804:Core/Inc/core_cm3.h **** 
 805:Core/Inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 806:Core/Inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 807:Core/Inc/core_cm3.h **** 
 808:Core/Inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 809:Core/Inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 810:Core/Inc/core_cm3.h **** 
 811:Core/Inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 812:Core/Inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 813:Core/Inc/core_cm3.h **** 
 814:Core/Inc/core_cm3.h **** /* ITM Integration Write Register Definitions */
 815:Core/Inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 816:Core/Inc/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 817:Core/Inc/core_cm3.h **** 
 818:Core/Inc/core_cm3.h **** /* ITM Integration Read Register Definitions */
 819:Core/Inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 820:Core/Inc/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 821:Core/Inc/core_cm3.h **** 
 822:Core/Inc/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 823:Core/Inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 824:Core/Inc/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 825:Core/Inc/core_cm3.h **** 
 826:Core/Inc/core_cm3.h **** /* ITM Lock Status Register Definitions */
 827:Core/Inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 828:Core/Inc/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 829:Core/Inc/core_cm3.h **** 
 830:Core/Inc/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 831:Core/Inc/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 832:Core/Inc/core_cm3.h **** 
 833:Core/Inc/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 834:Core/Inc/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 835:Core/Inc/core_cm3.h **** 
 836:Core/Inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 837:Core/Inc/core_cm3.h **** 
 838:Core/Inc/core_cm3.h **** 
 839:Core/Inc/core_cm3.h **** /**
 840:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 841:Core/Inc/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 842:Core/Inc/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 843:Core/Inc/core_cm3.h ****   @{
 844:Core/Inc/core_cm3.h ****  */
 845:Core/Inc/core_cm3.h **** 
 846:Core/Inc/core_cm3.h **** /**
 847:Core/Inc/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 848:Core/Inc/core_cm3.h ****  */
 849:Core/Inc/core_cm3.h **** typedef struct
 850:Core/Inc/core_cm3.h **** {
 851:Core/Inc/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 852:Core/Inc/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 853:Core/Inc/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 854:Core/Inc/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 855:Core/Inc/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 856:Core/Inc/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 857:Core/Inc/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 858:Core/Inc/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 19


 859:Core/Inc/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 860:Core/Inc/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 861:Core/Inc/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 862:Core/Inc/core_cm3.h ****         uint32_t RESERVED0[1U];
 863:Core/Inc/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 864:Core/Inc/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 865:Core/Inc/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 866:Core/Inc/core_cm3.h ****         uint32_t RESERVED1[1U];
 867:Core/Inc/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 868:Core/Inc/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 869:Core/Inc/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 870:Core/Inc/core_cm3.h ****         uint32_t RESERVED2[1U];
 871:Core/Inc/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 872:Core/Inc/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 873:Core/Inc/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 874:Core/Inc/core_cm3.h **** } DWT_Type;
 875:Core/Inc/core_cm3.h **** 
 876:Core/Inc/core_cm3.h **** /* DWT Control Register Definitions */
 877:Core/Inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 878:Core/Inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 879:Core/Inc/core_cm3.h **** 
 880:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 881:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 882:Core/Inc/core_cm3.h **** 
 883:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 884:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 885:Core/Inc/core_cm3.h **** 
 886:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 887:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 888:Core/Inc/core_cm3.h **** 
 889:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 890:Core/Inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 891:Core/Inc/core_cm3.h **** 
 892:Core/Inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 893:Core/Inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 894:Core/Inc/core_cm3.h **** 
 895:Core/Inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 896:Core/Inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 897:Core/Inc/core_cm3.h **** 
 898:Core/Inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 899:Core/Inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 900:Core/Inc/core_cm3.h **** 
 901:Core/Inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 902:Core/Inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 903:Core/Inc/core_cm3.h **** 
 904:Core/Inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 905:Core/Inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 906:Core/Inc/core_cm3.h **** 
 907:Core/Inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 908:Core/Inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 909:Core/Inc/core_cm3.h **** 
 910:Core/Inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 911:Core/Inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 912:Core/Inc/core_cm3.h **** 
 913:Core/Inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 914:Core/Inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 915:Core/Inc/core_cm3.h **** 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 20


 916:Core/Inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 917:Core/Inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 918:Core/Inc/core_cm3.h **** 
 919:Core/Inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 920:Core/Inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 921:Core/Inc/core_cm3.h **** 
 922:Core/Inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 923:Core/Inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 924:Core/Inc/core_cm3.h **** 
 925:Core/Inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 926:Core/Inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 927:Core/Inc/core_cm3.h **** 
 928:Core/Inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 929:Core/Inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 930:Core/Inc/core_cm3.h **** 
 931:Core/Inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 932:Core/Inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 933:Core/Inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 934:Core/Inc/core_cm3.h **** 
 935:Core/Inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 936:Core/Inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 937:Core/Inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 938:Core/Inc/core_cm3.h **** 
 939:Core/Inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 940:Core/Inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 941:Core/Inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 942:Core/Inc/core_cm3.h **** 
 943:Core/Inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 944:Core/Inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 945:Core/Inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 946:Core/Inc/core_cm3.h **** 
 947:Core/Inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 948:Core/Inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 949:Core/Inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 950:Core/Inc/core_cm3.h **** 
 951:Core/Inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 952:Core/Inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 953:Core/Inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 954:Core/Inc/core_cm3.h **** 
 955:Core/Inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 956:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 957:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 958:Core/Inc/core_cm3.h **** 
 959:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 960:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 961:Core/Inc/core_cm3.h **** 
 962:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 963:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 964:Core/Inc/core_cm3.h **** 
 965:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 966:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 967:Core/Inc/core_cm3.h **** 
 968:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 969:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 970:Core/Inc/core_cm3.h **** 
 971:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 972:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 21


 973:Core/Inc/core_cm3.h **** 
 974:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 975:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 976:Core/Inc/core_cm3.h **** 
 977:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 978:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 979:Core/Inc/core_cm3.h **** 
 980:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 981:Core/Inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 982:Core/Inc/core_cm3.h **** 
 983:Core/Inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 984:Core/Inc/core_cm3.h **** 
 985:Core/Inc/core_cm3.h **** 
 986:Core/Inc/core_cm3.h **** /**
 987:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
 988:Core/Inc/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 989:Core/Inc/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 990:Core/Inc/core_cm3.h ****   @{
 991:Core/Inc/core_cm3.h ****  */
 992:Core/Inc/core_cm3.h **** 
 993:Core/Inc/core_cm3.h **** /**
 994:Core/Inc/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 995:Core/Inc/core_cm3.h ****  */
 996:Core/Inc/core_cm3.h **** typedef struct
 997:Core/Inc/core_cm3.h **** {
 998:Core/Inc/core_cm3.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 999:Core/Inc/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1000:Core/Inc/core_cm3.h ****         uint32_t RESERVED0[2U];
1001:Core/Inc/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1002:Core/Inc/core_cm3.h ****         uint32_t RESERVED1[55U];
1003:Core/Inc/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1004:Core/Inc/core_cm3.h ****         uint32_t RESERVED2[131U];
1005:Core/Inc/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1006:Core/Inc/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1007:Core/Inc/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1008:Core/Inc/core_cm3.h ****         uint32_t RESERVED3[759U];
1009:Core/Inc/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1010:Core/Inc/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1011:Core/Inc/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1012:Core/Inc/core_cm3.h ****         uint32_t RESERVED4[1U];
1013:Core/Inc/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1014:Core/Inc/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1015:Core/Inc/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1016:Core/Inc/core_cm3.h ****         uint32_t RESERVED5[39U];
1017:Core/Inc/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1018:Core/Inc/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1019:Core/Inc/core_cm3.h ****         uint32_t RESERVED7[8U];
1020:Core/Inc/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1021:Core/Inc/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1022:Core/Inc/core_cm3.h **** } TPI_Type;
1023:Core/Inc/core_cm3.h **** 
1024:Core/Inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1025:Core/Inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1026:Core/Inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1027:Core/Inc/core_cm3.h **** 
1028:Core/Inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1029:Core/Inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 22


1030:Core/Inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1031:Core/Inc/core_cm3.h **** 
1032:Core/Inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1033:Core/Inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1034:Core/Inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1035:Core/Inc/core_cm3.h **** 
1036:Core/Inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1037:Core/Inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1038:Core/Inc/core_cm3.h **** 
1039:Core/Inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1040:Core/Inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1041:Core/Inc/core_cm3.h **** 
1042:Core/Inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1043:Core/Inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1044:Core/Inc/core_cm3.h **** 
1045:Core/Inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1046:Core/Inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1047:Core/Inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1048:Core/Inc/core_cm3.h **** 
1049:Core/Inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1050:Core/Inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1051:Core/Inc/core_cm3.h **** 
1052:Core/Inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1053:Core/Inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1054:Core/Inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1055:Core/Inc/core_cm3.h **** 
1056:Core/Inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1057:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1058:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1059:Core/Inc/core_cm3.h **** 
1060:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1061:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1062:Core/Inc/core_cm3.h **** 
1063:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1064:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1065:Core/Inc/core_cm3.h **** 
1066:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1067:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1068:Core/Inc/core_cm3.h **** 
1069:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1070:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1071:Core/Inc/core_cm3.h **** 
1072:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1073:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1074:Core/Inc/core_cm3.h **** 
1075:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1076:Core/Inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1077:Core/Inc/core_cm3.h **** 
1078:Core/Inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1079:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1080:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1081:Core/Inc/core_cm3.h **** 
1082:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1083:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1084:Core/Inc/core_cm3.h **** 
1085:Core/Inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 23


1087:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:Core/Inc/core_cm3.h **** 
1089:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1090:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:Core/Inc/core_cm3.h **** 
1092:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1093:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:Core/Inc/core_cm3.h **** 
1095:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1096:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:Core/Inc/core_cm3.h **** 
1098:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1099:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:Core/Inc/core_cm3.h **** 
1101:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1102:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:Core/Inc/core_cm3.h **** 
1104:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1105:Core/Inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:Core/Inc/core_cm3.h **** 
1107:Core/Inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1108:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1109:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1110:Core/Inc/core_cm3.h **** 
1111:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1112:Core/Inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1113:Core/Inc/core_cm3.h **** 
1114:Core/Inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1115:Core/Inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1116:Core/Inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1117:Core/Inc/core_cm3.h **** 
1118:Core/Inc/core_cm3.h **** /* TPI DEVID Register Definitions */
1119:Core/Inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1120:Core/Inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1121:Core/Inc/core_cm3.h **** 
1122:Core/Inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1123:Core/Inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1124:Core/Inc/core_cm3.h **** 
1125:Core/Inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1126:Core/Inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1127:Core/Inc/core_cm3.h **** 
1128:Core/Inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1129:Core/Inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1130:Core/Inc/core_cm3.h **** 
1131:Core/Inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1132:Core/Inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1133:Core/Inc/core_cm3.h **** 
1134:Core/Inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1135:Core/Inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1136:Core/Inc/core_cm3.h **** 
1137:Core/Inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1138:Core/Inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1139:Core/Inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:Core/Inc/core_cm3.h **** 
1141:Core/Inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1142:Core/Inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1143:Core/Inc/core_cm3.h **** 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 24


1144:Core/Inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1145:Core/Inc/core_cm3.h **** 
1146:Core/Inc/core_cm3.h **** 
1147:Core/Inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1148:Core/Inc/core_cm3.h **** /**
1149:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
1150:Core/Inc/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1151:Core/Inc/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1152:Core/Inc/core_cm3.h ****   @{
1153:Core/Inc/core_cm3.h ****  */
1154:Core/Inc/core_cm3.h **** 
1155:Core/Inc/core_cm3.h **** /**
1156:Core/Inc/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1157:Core/Inc/core_cm3.h ****  */
1158:Core/Inc/core_cm3.h **** typedef struct
1159:Core/Inc/core_cm3.h **** {
1160:Core/Inc/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1161:Core/Inc/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1162:Core/Inc/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1163:Core/Inc/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1164:Core/Inc/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1165:Core/Inc/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1166:Core/Inc/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1167:Core/Inc/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1168:Core/Inc/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1169:Core/Inc/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1170:Core/Inc/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1171:Core/Inc/core_cm3.h **** } MPU_Type;
1172:Core/Inc/core_cm3.h **** 
1173:Core/Inc/core_cm3.h **** #define MPU_TYPE_RALIASES                  4U
1174:Core/Inc/core_cm3.h **** 
1175:Core/Inc/core_cm3.h **** /* MPU Type Register Definitions */
1176:Core/Inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1177:Core/Inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1178:Core/Inc/core_cm3.h **** 
1179:Core/Inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1180:Core/Inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1181:Core/Inc/core_cm3.h **** 
1182:Core/Inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1183:Core/Inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1184:Core/Inc/core_cm3.h **** 
1185:Core/Inc/core_cm3.h **** /* MPU Control Register Definitions */
1186:Core/Inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1187:Core/Inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1188:Core/Inc/core_cm3.h **** 
1189:Core/Inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1190:Core/Inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1191:Core/Inc/core_cm3.h **** 
1192:Core/Inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1193:Core/Inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1194:Core/Inc/core_cm3.h **** 
1195:Core/Inc/core_cm3.h **** /* MPU Region Number Register Definitions */
1196:Core/Inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1197:Core/Inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1198:Core/Inc/core_cm3.h **** 
1199:Core/Inc/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1200:Core/Inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 25


1201:Core/Inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1202:Core/Inc/core_cm3.h **** 
1203:Core/Inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1204:Core/Inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1205:Core/Inc/core_cm3.h **** 
1206:Core/Inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1207:Core/Inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1208:Core/Inc/core_cm3.h **** 
1209:Core/Inc/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1210:Core/Inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1211:Core/Inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1212:Core/Inc/core_cm3.h **** 
1213:Core/Inc/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1214:Core/Inc/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1215:Core/Inc/core_cm3.h **** 
1216:Core/Inc/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1217:Core/Inc/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1218:Core/Inc/core_cm3.h **** 
1219:Core/Inc/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1220:Core/Inc/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1221:Core/Inc/core_cm3.h **** 
1222:Core/Inc/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1223:Core/Inc/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1224:Core/Inc/core_cm3.h **** 
1225:Core/Inc/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1226:Core/Inc/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1227:Core/Inc/core_cm3.h **** 
1228:Core/Inc/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1229:Core/Inc/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1230:Core/Inc/core_cm3.h **** 
1231:Core/Inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1232:Core/Inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1233:Core/Inc/core_cm3.h **** 
1234:Core/Inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1235:Core/Inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1236:Core/Inc/core_cm3.h **** 
1237:Core/Inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1238:Core/Inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1239:Core/Inc/core_cm3.h **** 
1240:Core/Inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1241:Core/Inc/core_cm3.h **** #endif
1242:Core/Inc/core_cm3.h **** 
1243:Core/Inc/core_cm3.h **** 
1244:Core/Inc/core_cm3.h **** /**
1245:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_core_register
1246:Core/Inc/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1247:Core/Inc/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1248:Core/Inc/core_cm3.h ****   @{
1249:Core/Inc/core_cm3.h ****  */
1250:Core/Inc/core_cm3.h **** 
1251:Core/Inc/core_cm3.h **** /**
1252:Core/Inc/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1253:Core/Inc/core_cm3.h ****  */
1254:Core/Inc/core_cm3.h **** typedef struct
1255:Core/Inc/core_cm3.h **** {
1256:Core/Inc/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1257:Core/Inc/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 26


1258:Core/Inc/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1259:Core/Inc/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1260:Core/Inc/core_cm3.h **** } CoreDebug_Type;
1261:Core/Inc/core_cm3.h **** 
1262:Core/Inc/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1263:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1264:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1265:Core/Inc/core_cm3.h **** 
1266:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1267:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1268:Core/Inc/core_cm3.h **** 
1269:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1270:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1271:Core/Inc/core_cm3.h **** 
1272:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1273:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1274:Core/Inc/core_cm3.h **** 
1275:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1276:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1277:Core/Inc/core_cm3.h **** 
1278:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1279:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1280:Core/Inc/core_cm3.h **** 
1281:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1282:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1283:Core/Inc/core_cm3.h **** 
1284:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1285:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1286:Core/Inc/core_cm3.h **** 
1287:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1288:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1289:Core/Inc/core_cm3.h **** 
1290:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1291:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1292:Core/Inc/core_cm3.h **** 
1293:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1294:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1295:Core/Inc/core_cm3.h **** 
1296:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1297:Core/Inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1298:Core/Inc/core_cm3.h **** 
1299:Core/Inc/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1300:Core/Inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1301:Core/Inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1302:Core/Inc/core_cm3.h **** 
1303:Core/Inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1304:Core/Inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1305:Core/Inc/core_cm3.h **** 
1306:Core/Inc/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1307:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1308:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1309:Core/Inc/core_cm3.h **** 
1310:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1311:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1312:Core/Inc/core_cm3.h **** 
1313:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1314:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 27


1315:Core/Inc/core_cm3.h **** 
1316:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1317:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1318:Core/Inc/core_cm3.h **** 
1319:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1320:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1321:Core/Inc/core_cm3.h **** 
1322:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1323:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1324:Core/Inc/core_cm3.h **** 
1325:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1326:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1327:Core/Inc/core_cm3.h **** 
1328:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1329:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1330:Core/Inc/core_cm3.h **** 
1331:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1332:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1333:Core/Inc/core_cm3.h **** 
1334:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1335:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1336:Core/Inc/core_cm3.h **** 
1337:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1338:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1339:Core/Inc/core_cm3.h **** 
1340:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1341:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1342:Core/Inc/core_cm3.h **** 
1343:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1344:Core/Inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1345:Core/Inc/core_cm3.h **** 
1346:Core/Inc/core_cm3.h **** /*@} end of group 6 */
1347:Core/Inc/core_cm3.h **** 
1348:Core/Inc/core_cm3.h **** 
1349:Core/Inc/core_cm3.h **** /**
1350:Core/Inc/core_cm3.h ****   \ingroup    CMSIS_core_register
1351:Core/Inc/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1352:Core/Inc/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1353:Core/Inc/core_cm3.h ****   @{
1354:Core/Inc/core_cm3.h ****  */
1355:Core/Inc/core_cm3.h **** 
1356:Core/Inc/core_cm3.h **** /**
1357:Core/Inc/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1358:Core/Inc/core_cm3.h ****   \param[in] field  Name of the register bit field.
1359:Core/Inc/core_cm3.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1360:Core/Inc/core_cm3.h ****   \return           Masked and shifted value.
1361:Core/Inc/core_cm3.h **** */
1362:Core/Inc/core_cm3.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1363:Core/Inc/core_cm3.h **** 
1364:Core/Inc/core_cm3.h **** /**
1365:Core/Inc/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1366:Core/Inc/core_cm3.h ****   \param[in] field  Name of the register bit field.
1367:Core/Inc/core_cm3.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1368:Core/Inc/core_cm3.h ****   \return           Masked and shifted bit field value.
1369:Core/Inc/core_cm3.h **** */
1370:Core/Inc/core_cm3.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1371:Core/Inc/core_cm3.h **** 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 28


1372:Core/Inc/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1373:Core/Inc/core_cm3.h **** 
1374:Core/Inc/core_cm3.h **** 
1375:Core/Inc/core_cm3.h **** /**
1376:Core/Inc/core_cm3.h ****   \ingroup    CMSIS_core_register
1377:Core/Inc/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1378:Core/Inc/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1379:Core/Inc/core_cm3.h ****   @{
1380:Core/Inc/core_cm3.h ****  */
1381:Core/Inc/core_cm3.h **** 
1382:Core/Inc/core_cm3.h **** /* Memory mapping of Core Hardware */
1383:Core/Inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1384:Core/Inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1385:Core/Inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1386:Core/Inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1387:Core/Inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1388:Core/Inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1389:Core/Inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1390:Core/Inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1391:Core/Inc/core_cm3.h **** 
1392:Core/Inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1393:Core/Inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1394:Core/Inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1395:Core/Inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1396:Core/Inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1397:Core/Inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1398:Core/Inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1399:Core/Inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1400:Core/Inc/core_cm3.h **** 
1401:Core/Inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1402:Core/Inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1403:Core/Inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1404:Core/Inc/core_cm3.h **** #endif
1405:Core/Inc/core_cm3.h **** 
1406:Core/Inc/core_cm3.h **** /*@} */
1407:Core/Inc/core_cm3.h **** 
1408:Core/Inc/core_cm3.h **** 
1409:Core/Inc/core_cm3.h **** 
1410:Core/Inc/core_cm3.h **** /*******************************************************************************
1411:Core/Inc/core_cm3.h ****  *                Hardware Abstraction Layer
1412:Core/Inc/core_cm3.h ****   Core Function Interface contains:
1413:Core/Inc/core_cm3.h ****   - Core NVIC Functions
1414:Core/Inc/core_cm3.h ****   - Core SysTick Functions
1415:Core/Inc/core_cm3.h ****   - Core Debug Functions
1416:Core/Inc/core_cm3.h ****   - Core Register Access Functions
1417:Core/Inc/core_cm3.h ****  ******************************************************************************/
1418:Core/Inc/core_cm3.h **** /**
1419:Core/Inc/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1420:Core/Inc/core_cm3.h **** */
1421:Core/Inc/core_cm3.h **** 
1422:Core/Inc/core_cm3.h **** 
1423:Core/Inc/core_cm3.h **** 
1424:Core/Inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1425:Core/Inc/core_cm3.h **** /**
1426:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1427:Core/Inc/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1428:Core/Inc/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 29


1429:Core/Inc/core_cm3.h ****   @{
1430:Core/Inc/core_cm3.h ****  */
1431:Core/Inc/core_cm3.h **** 
1432:Core/Inc/core_cm3.h **** #ifdef CMSIS_NVIC_VIRTUAL
1433:Core/Inc/core_cm3.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1434:Core/Inc/core_cm3.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1435:Core/Inc/core_cm3.h ****   #endif
1436:Core/Inc/core_cm3.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1437:Core/Inc/core_cm3.h **** #else
1438:Core/Inc/core_cm3.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1439:Core/Inc/core_cm3.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1440:Core/Inc/core_cm3.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1441:Core/Inc/core_cm3.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1442:Core/Inc/core_cm3.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1443:Core/Inc/core_cm3.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1444:Core/Inc/core_cm3.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1445:Core/Inc/core_cm3.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1446:Core/Inc/core_cm3.h ****   #define NVIC_GetActive              __NVIC_GetActive
1447:Core/Inc/core_cm3.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1448:Core/Inc/core_cm3.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1449:Core/Inc/core_cm3.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1450:Core/Inc/core_cm3.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1451:Core/Inc/core_cm3.h **** 
1452:Core/Inc/core_cm3.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1453:Core/Inc/core_cm3.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1454:Core/Inc/core_cm3.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1455:Core/Inc/core_cm3.h ****   #endif
1456:Core/Inc/core_cm3.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1457:Core/Inc/core_cm3.h **** #else
1458:Core/Inc/core_cm3.h ****   #define NVIC_SetVector              __NVIC_SetVector
1459:Core/Inc/core_cm3.h ****   #define NVIC_GetVector              __NVIC_GetVector
1460:Core/Inc/core_cm3.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1461:Core/Inc/core_cm3.h **** 
1462:Core/Inc/core_cm3.h **** #define NVIC_USER_IRQ_OFFSET          16
1463:Core/Inc/core_cm3.h **** 
1464:Core/Inc/core_cm3.h **** 
1465:Core/Inc/core_cm3.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1466:Core/Inc/core_cm3.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1467:Core/Inc/core_cm3.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1468:Core/Inc/core_cm3.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1469:Core/Inc/core_cm3.h **** 
1470:Core/Inc/core_cm3.h **** 
1471:Core/Inc/core_cm3.h **** /**
1472:Core/Inc/core_cm3.h ****   \brief   Set Priority Grouping
1473:Core/Inc/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1474:Core/Inc/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1475:Core/Inc/core_cm3.h ****            Only values from 0..7 are used.
1476:Core/Inc/core_cm3.h ****            In case of a conflict between priority grouping and available
1477:Core/Inc/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1478:Core/Inc/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1479:Core/Inc/core_cm3.h ****  */
1480:Core/Inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1481:Core/Inc/core_cm3.h **** {
1482:Core/Inc/core_cm3.h ****   uint32_t reg_value;
1483:Core/Inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1484:Core/Inc/core_cm3.h **** 
1485:Core/Inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 30


1486:Core/Inc/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1487:Core/Inc/core_cm3.h ****   reg_value  =  (reg_value                                   |
1488:Core/Inc/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1489:Core/Inc/core_cm3.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key a
1490:Core/Inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1491:Core/Inc/core_cm3.h **** }
1492:Core/Inc/core_cm3.h **** 
1493:Core/Inc/core_cm3.h **** 
1494:Core/Inc/core_cm3.h **** /**
1495:Core/Inc/core_cm3.h ****   \brief   Get Priority Grouping
1496:Core/Inc/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1497:Core/Inc/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1498:Core/Inc/core_cm3.h ****  */
1499:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1500:Core/Inc/core_cm3.h **** {
1501:Core/Inc/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1502:Core/Inc/core_cm3.h **** }
1503:Core/Inc/core_cm3.h **** 
1504:Core/Inc/core_cm3.h **** 
1505:Core/Inc/core_cm3.h **** /**
1506:Core/Inc/core_cm3.h ****   \brief   Enable Interrupt
1507:Core/Inc/core_cm3.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1508:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1509:Core/Inc/core_cm3.h ****   \note    IRQn must not be negative.
1510:Core/Inc/core_cm3.h ****  */
1511:Core/Inc/core_cm3.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1512:Core/Inc/core_cm3.h **** {
1513:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1514:Core/Inc/core_cm3.h ****   {
1515:Core/Inc/core_cm3.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1516:Core/Inc/core_cm3.h ****   }
1517:Core/Inc/core_cm3.h **** }
1518:Core/Inc/core_cm3.h **** 
1519:Core/Inc/core_cm3.h **** 
1520:Core/Inc/core_cm3.h **** /**
1521:Core/Inc/core_cm3.h ****   \brief   Get Interrupt Enable status
1522:Core/Inc/core_cm3.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1523:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1524:Core/Inc/core_cm3.h ****   \return             0  Interrupt is not enabled.
1525:Core/Inc/core_cm3.h ****   \return             1  Interrupt is enabled.
1526:Core/Inc/core_cm3.h ****   \note    IRQn must not be negative.
1527:Core/Inc/core_cm3.h ****  */
1528:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1529:Core/Inc/core_cm3.h **** {
1530:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1531:Core/Inc/core_cm3.h ****   {
1532:Core/Inc/core_cm3.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1533:Core/Inc/core_cm3.h ****   }
1534:Core/Inc/core_cm3.h ****   else
1535:Core/Inc/core_cm3.h ****   {
1536:Core/Inc/core_cm3.h ****     return(0U);
1537:Core/Inc/core_cm3.h ****   }
1538:Core/Inc/core_cm3.h **** }
1539:Core/Inc/core_cm3.h **** 
1540:Core/Inc/core_cm3.h **** 
1541:Core/Inc/core_cm3.h **** /**
1542:Core/Inc/core_cm3.h ****   \brief   Disable Interrupt
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 31


1543:Core/Inc/core_cm3.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1544:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1545:Core/Inc/core_cm3.h ****   \note    IRQn must not be negative.
1546:Core/Inc/core_cm3.h ****  */
1547:Core/Inc/core_cm3.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1548:Core/Inc/core_cm3.h **** {
1549:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1550:Core/Inc/core_cm3.h ****   {
1551:Core/Inc/core_cm3.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1552:Core/Inc/core_cm3.h ****     __DSB();
1553:Core/Inc/core_cm3.h ****     __ISB();
1554:Core/Inc/core_cm3.h ****   }
1555:Core/Inc/core_cm3.h **** }
1556:Core/Inc/core_cm3.h **** 
1557:Core/Inc/core_cm3.h **** 
1558:Core/Inc/core_cm3.h **** /**
1559:Core/Inc/core_cm3.h ****   \brief   Get Pending Interrupt
1560:Core/Inc/core_cm3.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1561:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1562:Core/Inc/core_cm3.h ****   \return             0  Interrupt status is not pending.
1563:Core/Inc/core_cm3.h ****   \return             1  Interrupt status is pending.
1564:Core/Inc/core_cm3.h ****   \note    IRQn must not be negative.
1565:Core/Inc/core_cm3.h ****  */
1566:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1567:Core/Inc/core_cm3.h **** {
1568:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1569:Core/Inc/core_cm3.h ****   {
1570:Core/Inc/core_cm3.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1571:Core/Inc/core_cm3.h ****   }
1572:Core/Inc/core_cm3.h ****   else
1573:Core/Inc/core_cm3.h ****   {
1574:Core/Inc/core_cm3.h ****     return(0U);
1575:Core/Inc/core_cm3.h ****   }
1576:Core/Inc/core_cm3.h **** }
1577:Core/Inc/core_cm3.h **** 
1578:Core/Inc/core_cm3.h **** 
1579:Core/Inc/core_cm3.h **** /**
1580:Core/Inc/core_cm3.h ****   \brief   Set Pending Interrupt
1581:Core/Inc/core_cm3.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1582:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1583:Core/Inc/core_cm3.h ****   \note    IRQn must not be negative.
1584:Core/Inc/core_cm3.h ****  */
1585:Core/Inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1586:Core/Inc/core_cm3.h **** {
1587:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1588:Core/Inc/core_cm3.h ****   {
1589:Core/Inc/core_cm3.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1590:Core/Inc/core_cm3.h ****   }
1591:Core/Inc/core_cm3.h **** }
1592:Core/Inc/core_cm3.h **** 
1593:Core/Inc/core_cm3.h **** 
1594:Core/Inc/core_cm3.h **** /**
1595:Core/Inc/core_cm3.h ****   \brief   Clear Pending Interrupt
1596:Core/Inc/core_cm3.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1597:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1598:Core/Inc/core_cm3.h ****   \note    IRQn must not be negative.
1599:Core/Inc/core_cm3.h ****  */
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 32


1600:Core/Inc/core_cm3.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1601:Core/Inc/core_cm3.h **** {
1602:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1603:Core/Inc/core_cm3.h ****   {
1604:Core/Inc/core_cm3.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1605:Core/Inc/core_cm3.h ****   }
1606:Core/Inc/core_cm3.h **** }
1607:Core/Inc/core_cm3.h **** 
1608:Core/Inc/core_cm3.h **** 
1609:Core/Inc/core_cm3.h **** /**
1610:Core/Inc/core_cm3.h ****   \brief   Get Active Interrupt
1611:Core/Inc/core_cm3.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1612:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1613:Core/Inc/core_cm3.h ****   \return             0  Interrupt status is not active.
1614:Core/Inc/core_cm3.h ****   \return             1  Interrupt status is active.
1615:Core/Inc/core_cm3.h ****   \note    IRQn must not be negative.
1616:Core/Inc/core_cm3.h ****  */
1617:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1618:Core/Inc/core_cm3.h **** {
1619:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1620:Core/Inc/core_cm3.h ****   {
1621:Core/Inc/core_cm3.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1622:Core/Inc/core_cm3.h ****   }
1623:Core/Inc/core_cm3.h ****   else
1624:Core/Inc/core_cm3.h ****   {
1625:Core/Inc/core_cm3.h ****     return(0U);
1626:Core/Inc/core_cm3.h ****   }
1627:Core/Inc/core_cm3.h **** }
1628:Core/Inc/core_cm3.h **** 
1629:Core/Inc/core_cm3.h **** 
1630:Core/Inc/core_cm3.h **** /**
1631:Core/Inc/core_cm3.h ****   \brief   Set Interrupt Priority
1632:Core/Inc/core_cm3.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1633:Core/Inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1634:Core/Inc/core_cm3.h ****            or negative to specify a processor exception.
1635:Core/Inc/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1636:Core/Inc/core_cm3.h ****   \param [in]  priority  Priority to set.
1637:Core/Inc/core_cm3.h ****   \note    The priority cannot be set for every processor exception.
1638:Core/Inc/core_cm3.h ****  */
1639:Core/Inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1640:Core/Inc/core_cm3.h **** {
1641:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1642:Core/Inc/core_cm3.h ****   {
1643:Core/Inc/core_cm3.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1644:Core/Inc/core_cm3.h ****   }
1645:Core/Inc/core_cm3.h ****   else
1646:Core/Inc/core_cm3.h ****   {
1647:Core/Inc/core_cm3.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1648:Core/Inc/core_cm3.h ****   }
1649:Core/Inc/core_cm3.h **** }
1650:Core/Inc/core_cm3.h **** 
1651:Core/Inc/core_cm3.h **** 
1652:Core/Inc/core_cm3.h **** /**
1653:Core/Inc/core_cm3.h ****   \brief   Get Interrupt Priority
1654:Core/Inc/core_cm3.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1655:Core/Inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1656:Core/Inc/core_cm3.h ****            or negative to specify a processor exception.
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 33


1657:Core/Inc/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1658:Core/Inc/core_cm3.h ****   \return             Interrupt Priority.
1659:Core/Inc/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1660:Core/Inc/core_cm3.h ****  */
1661:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1662:Core/Inc/core_cm3.h **** {
1663:Core/Inc/core_cm3.h **** 
1664:Core/Inc/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1665:Core/Inc/core_cm3.h ****   {
1666:Core/Inc/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1667:Core/Inc/core_cm3.h ****   }
1668:Core/Inc/core_cm3.h ****   else
1669:Core/Inc/core_cm3.h ****   {
1670:Core/Inc/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1671:Core/Inc/core_cm3.h ****   }
1672:Core/Inc/core_cm3.h **** }
1673:Core/Inc/core_cm3.h **** 
1674:Core/Inc/core_cm3.h **** 
1675:Core/Inc/core_cm3.h **** /**
1676:Core/Inc/core_cm3.h ****   \brief   Encode Priority
1677:Core/Inc/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1678:Core/Inc/core_cm3.h ****            preemptive priority value, and subpriority value.
1679:Core/Inc/core_cm3.h ****            In case of a conflict between priority grouping and available
1680:Core/Inc/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1681:Core/Inc/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1682:Core/Inc/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1683:Core/Inc/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1684:Core/Inc/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1685:Core/Inc/core_cm3.h ****  */
1686:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1687:Core/Inc/core_cm3.h **** {
1688:Core/Inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1689:Core/Inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1690:Core/Inc/core_cm3.h ****   uint32_t SubPriorityBits;
1691:Core/Inc/core_cm3.h **** 
1692:Core/Inc/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1693:Core/Inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1694:Core/Inc/core_cm3.h **** 
1695:Core/Inc/core_cm3.h ****   return (
1696:Core/Inc/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1697:Core/Inc/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1698:Core/Inc/core_cm3.h ****          );
1699:Core/Inc/core_cm3.h **** }
1700:Core/Inc/core_cm3.h **** 
1701:Core/Inc/core_cm3.h **** 
1702:Core/Inc/core_cm3.h **** /**
1703:Core/Inc/core_cm3.h ****   \brief   Decode Priority
1704:Core/Inc/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1705:Core/Inc/core_cm3.h ****            preemptive priority value and subpriority value.
1706:Core/Inc/core_cm3.h ****            In case of a conflict between priority grouping and available
1707:Core/Inc/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1708:Core/Inc/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1709:Core/Inc/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1710:Core/Inc/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1711:Core/Inc/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1712:Core/Inc/core_cm3.h ****  */
1713:Core/Inc/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 34


1714:Core/Inc/core_cm3.h **** {
1715:Core/Inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1716:Core/Inc/core_cm3.h ****   uint32_t PreemptPriorityBits;
1717:Core/Inc/core_cm3.h ****   uint32_t SubPriorityBits;
1718:Core/Inc/core_cm3.h **** 
1719:Core/Inc/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1720:Core/Inc/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1721:Core/Inc/core_cm3.h **** 
1722:Core/Inc/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1723:Core/Inc/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1724:Core/Inc/core_cm3.h **** }
1725:Core/Inc/core_cm3.h **** 
1726:Core/Inc/core_cm3.h **** 
1727:Core/Inc/core_cm3.h **** /**
1728:Core/Inc/core_cm3.h ****   \brief   Set Interrupt Vector
1729:Core/Inc/core_cm3.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1730:Core/Inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1731:Core/Inc/core_cm3.h ****            or negative to specify a processor exception.
1732:Core/Inc/core_cm3.h ****            VTOR must been relocated to SRAM before.
1733:Core/Inc/core_cm3.h ****   \param [in]   IRQn      Interrupt number
1734:Core/Inc/core_cm3.h ****   \param [in]   vector    Address of interrupt handler function
1735:Core/Inc/core_cm3.h ****  */
1736:Core/Inc/core_cm3.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1737:Core/Inc/core_cm3.h **** {
1738:Core/Inc/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1739:Core/Inc/core_cm3.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1740:Core/Inc/core_cm3.h **** }
1741:Core/Inc/core_cm3.h **** 
1742:Core/Inc/core_cm3.h **** 
1743:Core/Inc/core_cm3.h **** /**
1744:Core/Inc/core_cm3.h ****   \brief   Get Interrupt Vector
1745:Core/Inc/core_cm3.h ****   \details Reads an interrupt vector from interrupt vector table.
1746:Core/Inc/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1747:Core/Inc/core_cm3.h ****            or negative to specify a processor exception.
1748:Core/Inc/core_cm3.h ****   \param [in]   IRQn      Interrupt number.
1749:Core/Inc/core_cm3.h ****   \return                 Address of interrupt handler function
1750:Core/Inc/core_cm3.h ****  */
1751:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1752:Core/Inc/core_cm3.h **** {
1753:Core/Inc/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1754:Core/Inc/core_cm3.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1755:Core/Inc/core_cm3.h **** }
1756:Core/Inc/core_cm3.h **** 
1757:Core/Inc/core_cm3.h **** 
1758:Core/Inc/core_cm3.h **** /**
1759:Core/Inc/core_cm3.h ****   \brief   System Reset
1760:Core/Inc/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1761:Core/Inc/core_cm3.h ****  */
1762:Core/Inc/core_cm3.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1763:Core/Inc/core_cm3.h **** {
1764:Core/Inc/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1765:Core/Inc/core_cm3.h ****                                                                        buffered write are completed
1766:Core/Inc/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1767:Core/Inc/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1768:Core/Inc/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1769:Core/Inc/core_cm3.h ****   __DSB();                                                          /* Ensure completion of memory 
1770:Core/Inc/core_cm3.h **** 
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 35


1771:Core/Inc/core_cm3.h ****   for(;;)                                                           /* wait until reset */
1772:Core/Inc/core_cm3.h ****   {
1773:Core/Inc/core_cm3.h ****     __NOP();
1774:Core/Inc/core_cm3.h ****   }
1775:Core/Inc/core_cm3.h **** }
1776:Core/Inc/core_cm3.h **** 
1777:Core/Inc/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1778:Core/Inc/core_cm3.h **** 
1779:Core/Inc/core_cm3.h **** /* ##########################  MPU functions  #################################### */
1780:Core/Inc/core_cm3.h **** 
1781:Core/Inc/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1782:Core/Inc/core_cm3.h **** 
1783:Core/Inc/core_cm3.h **** #include "mpu_armv7.h"
1784:Core/Inc/core_cm3.h **** 
1785:Core/Inc/core_cm3.h **** #endif
1786:Core/Inc/core_cm3.h **** 
1787:Core/Inc/core_cm3.h **** /* ##########################  FPU functions  #################################### */
1788:Core/Inc/core_cm3.h **** /**
1789:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1790:Core/Inc/core_cm3.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1791:Core/Inc/core_cm3.h ****   \brief    Function that provides FPU type.
1792:Core/Inc/core_cm3.h ****   @{
1793:Core/Inc/core_cm3.h ****  */
1794:Core/Inc/core_cm3.h **** 
1795:Core/Inc/core_cm3.h **** /**
1796:Core/Inc/core_cm3.h ****   \brief   get FPU type
1797:Core/Inc/core_cm3.h ****   \details returns the FPU type
1798:Core/Inc/core_cm3.h ****   \returns
1799:Core/Inc/core_cm3.h ****    - \b  0: No FPU
1800:Core/Inc/core_cm3.h ****    - \b  1: Single precision FPU
1801:Core/Inc/core_cm3.h ****    - \b  2: Double + Single precision FPU
1802:Core/Inc/core_cm3.h ****  */
1803:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1804:Core/Inc/core_cm3.h **** {
1805:Core/Inc/core_cm3.h ****     return 0U;           /* No FPU */
1806:Core/Inc/core_cm3.h **** }
1807:Core/Inc/core_cm3.h **** 
1808:Core/Inc/core_cm3.h **** 
1809:Core/Inc/core_cm3.h **** /*@} end of CMSIS_Core_FpuFunctions */
1810:Core/Inc/core_cm3.h **** 
1811:Core/Inc/core_cm3.h **** 
1812:Core/Inc/core_cm3.h **** 
1813:Core/Inc/core_cm3.h **** /* ##################################    SysTick function  ########################################
1814:Core/Inc/core_cm3.h **** /**
1815:Core/Inc/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1816:Core/Inc/core_cm3.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1817:Core/Inc/core_cm3.h ****   \brief    Functions that configure the System.
1818:Core/Inc/core_cm3.h ****   @{
1819:Core/Inc/core_cm3.h ****  */
1820:Core/Inc/core_cm3.h **** 
1821:Core/Inc/core_cm3.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1822:Core/Inc/core_cm3.h **** 
1823:Core/Inc/core_cm3.h **** /**
1824:Core/Inc/core_cm3.h ****   \brief   System Tick Configuration
1825:Core/Inc/core_cm3.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1826:Core/Inc/core_cm3.h ****            Counter is in free running mode to generate periodic interrupts.
1827:Core/Inc/core_cm3.h ****   \param [in]  ticks  Number of ticks between two interrupts.
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 36


1828:Core/Inc/core_cm3.h ****   \return          0  Function succeeded.
1829:Core/Inc/core_cm3.h ****   \return          1  Function failed.
1830:Core/Inc/core_cm3.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1831:Core/Inc/core_cm3.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1832:Core/Inc/core_cm3.h ****            must contain a vendor-specific implementation of this function.
1833:Core/Inc/core_cm3.h ****  */
1834:Core/Inc/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
  75              		.loc 2 1834 26 is_stmt 1 view .LVU7
  76              	.LBB10:
1835:Core/Inc/core_cm3.h **** {
1836:Core/Inc/core_cm3.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  77              		.loc 2 1836 3 view .LVU8
  78              		.loc 2 1836 14 is_stmt 0 view .LVU9
  79 000a 0138     		subs	r0, r0, #1
  80              	.LVL2:
  81              		.loc 2 1836 6 view .LVU10
  82 000c B0F1807F 		cmp	r0, #16777216
  83 0010 0CD2     		bcs	.L8
1837:Core/Inc/core_cm3.h ****   {
1838:Core/Inc/core_cm3.h ****     return (1UL);                                                   /* Reload value impossible */
1839:Core/Inc/core_cm3.h ****   }
1840:Core/Inc/core_cm3.h **** 
1841:Core/Inc/core_cm3.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  84              		.loc 2 1841 3 is_stmt 1 view .LVU11
  85              		.loc 2 1841 18 is_stmt 0 view .LVU12
  86 0012 4FF0E023 		mov	r3, #-536813568
  87 0016 5861     		str	r0, [r3, #20]
1842:Core/Inc/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
  88              		.loc 2 1842 3 is_stmt 1 view .LVU13
  89              	.LVL3:
  90              	.LBB11:
  91              	.LBI11:
1639:Core/Inc/core_cm3.h **** {
  92              		.loc 2 1639 22 view .LVU14
  93              	.LBB12:
1641:Core/Inc/core_cm3.h ****   {
  94              		.loc 2 1641 3 view .LVU15
1647:Core/Inc/core_cm3.h ****   }
  95              		.loc 2 1647 5 view .LVU16
1647:Core/Inc/core_cm3.h ****   }
  96              		.loc 2 1647 46 is_stmt 0 view .LVU17
  97 0018 074A     		ldr	r2, .L9+4
  98 001a F021     		movs	r1, #240
  99 001c 82F82310 		strb	r1, [r2, #35]
 100              	.LVL4:
1647:Core/Inc/core_cm3.h ****   }
 101              		.loc 2 1647 46 view .LVU18
 102              	.LBE12:
 103              	.LBE11:
1843:Core/Inc/core_cm3.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 104              		.loc 2 1843 3 is_stmt 1 view .LVU19
 105              		.loc 2 1843 18 is_stmt 0 view .LVU20
 106 0020 0022     		movs	r2, #0
 107 0022 9A61     		str	r2, [r3, #24]
1844:Core/Inc/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 108              		.loc 2 1844 3 is_stmt 1 view .LVU21
 109              		.loc 2 1844 18 is_stmt 0 view .LVU22
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 37


 110 0024 0722     		movs	r2, #7
 111 0026 1A61     		str	r2, [r3, #16]
1845:Core/Inc/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   |
1846:Core/Inc/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
1847:Core/Inc/core_cm3.h ****   return (0UL);                                                     /* Function successful */
 112              		.loc 2 1847 3 is_stmt 1 view .LVU23
 113              	.LVL5:
 114              	.L6:
 115              		.loc 2 1847 3 is_stmt 0 view .LVU24
 116              	.LBE10:
 117              	.LBE9:
  98:Core/Src/rcc.c ****   {
  99:Core/Src/rcc.c ****     UsageFault_Handler();
 100:Core/Src/rcc.c ****   }
 101:Core/Src/rcc.c ****   return 0;
 118              		.loc 1 101 3 is_stmt 1 view .LVU25
 102:Core/Src/rcc.c **** }
 119              		.loc 1 102 1 is_stmt 0 view .LVU26
 120 0028 0020     		movs	r0, #0
 121 002a 08BD     		pop	{r3, pc}
 122              	.LVL6:
 123              	.L8:
 124              	.LBB13:
  99:Core/Src/rcc.c ****   }
 125              		.loc 1 99 5 is_stmt 1 view .LVU27
 126 002c FFF7FEFF 		bl	UsageFault_Handler
 127              	.LVL7:
 128 0030 FAE7     		b	.L6
 129              	.L10:
 130 0032 00BF     		.align	2
 131              	.L9:
 132 0034 00000000 		.word	SystemCoreClock
 133 0038 00ED00E0 		.word	-536810240
 134              	.LBE13:
 135              		.cfi_endproc
 136              	.LFE67:
 138              		.section	.text.IncTick,"ax",%progbits
 139              		.align	1
 140              		.global	IncTick
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 145              	IncTick:
 146              	.LFB68:
 103:Core/Src/rcc.c **** 
 104:Core/Src/rcc.c **** void IncTick(void)
 105:Core/Src/rcc.c **** {
 147              		.loc 1 105 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 106:Core/Src/rcc.c ****   Ticks++;
 152              		.loc 1 106 3 view .LVU29
 153              		.loc 1 106 8 is_stmt 0 view .LVU30
 154 0000 024A     		ldr	r2, .L12
 155 0002 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 38


 156 0004 0133     		adds	r3, r3, #1
 157 0006 1360     		str	r3, [r2]
 107:Core/Src/rcc.c **** }
 158              		.loc 1 107 1 view .LVU31
 159 0008 7047     		bx	lr
 160              	.L13:
 161 000a 00BF     		.align	2
 162              	.L12:
 163 000c 00000000 		.word	Ticks
 164              		.cfi_endproc
 165              	.LFE68:
 167              		.section	.text.GetTick,"ax",%progbits
 168              		.align	1
 169              		.global	GetTick
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 174              	GetTick:
 175              	.LFB69:
 108:Core/Src/rcc.c **** 
 109:Core/Src/rcc.c **** uint32_t GetTick(void)
 110:Core/Src/rcc.c **** {
 176              		.loc 1 110 1 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 111:Core/Src/rcc.c ****   return Ticks;
 181              		.loc 1 111 3 view .LVU33
 182              		.loc 1 111 10 is_stmt 0 view .LVU34
 183 0000 014B     		ldr	r3, .L15
 184 0002 1868     		ldr	r0, [r3]
 112:Core/Src/rcc.c **** }
 185              		.loc 1 112 1 view .LVU35
 186 0004 7047     		bx	lr
 187              	.L16:
 188 0006 00BF     		.align	2
 189              	.L15:
 190 0008 00000000 		.word	Ticks
 191              		.cfi_endproc
 192              	.LFE69:
 194              		.section	.text.SystemClockConfig,"ax",%progbits
 195              		.align	1
 196              		.global	SystemClockConfig
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 201              	SystemClockConfig:
 202              	.LFB66:
  48:Core/Src/rcc.c ****   #define AMNT_DIV 1000UL   /* Divider of the freq SysTick. equal to amnt counts in 1 sec */
 203              		.loc 1 48 1 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 10B5     		push	{r4, lr}
 208              	.LCFI1:
 209              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 39


 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
  51:Core/Src/rcc.c ****   SysTickInit(AMNT_DIV);    /* Start of SysTick with CoreClock value */
 212              		.loc 1 51 3 view .LVU37
 213 0002 FFF7FEFF 		bl	SystemCoreClockUpdate
 214              	.LVL8:
  52:Core/Src/rcc.c **** 
 215              		.loc 1 52 3 view .LVU38
 216 0006 4FF47A70 		mov	r0, #1000
 217 000a FFF7FEFF 		bl	SysTickInit
 218              	.LVL9:
  55:Core/Src/rcc.c **** 
 219              		.loc 1 55 3 view .LVU39
 220 000e 204A     		ldr	r2, .L23
 221 0010 1368     		ldr	r3, [r2]
 222 0012 43F00403 		orr	r3, r3, #4
 223 0016 1360     		str	r3, [r2]
  58:Core/Src/rcc.c **** 
 224              		.loc 1 58 3 view .LVU40
 225 0018 A2F58052 		sub	r2, r2, #4096
 226 001c 1368     		ldr	r3, [r2]
 227 001e 43F48033 		orr	r3, r3, #65536
 228 0022 1360     		str	r3, [r2]
  61:Core/Src/rcc.c ****   while(READ_BIT(RCC->CR, RCC_CR_HSERDY_Msk) == 0)
 229              		.loc 1 61 3 view .LVU41
  61:Core/Src/rcc.c ****   while(READ_BIT(RCC->CR, RCC_CR_HSERDY_Msk) == 0)
 230              		.loc 1 61 19 is_stmt 0 view .LVU42
 231 0024 FFF7FEFF 		bl	GetTick
 232              	.LVL10:
 233 0028 0446     		mov	r4, r0
 234              	.LVL11:
  62:Core/Src/rcc.c ****   {
 235              		.loc 1 62 3 is_stmt 1 view .LVU43
 236              	.L18:
  62:Core/Src/rcc.c ****   {
 237              		.loc 1 62 46 view .LVU44
  62:Core/Src/rcc.c ****   {
 238              		.loc 1 62 9 is_stmt 0 view .LVU45
 239 002a 1A4B     		ldr	r3, .L23+4
 240 002c 1B68     		ldr	r3, [r3]
  62:Core/Src/rcc.c ****   {
 241              		.loc 1 62 46 view .LVU46
 242 002e 13F4003F 		tst	r3, #131072
 243 0032 04D1     		bne	.L19
  64:Core/Src/rcc.c ****     { 
 244              		.loc 1 64 5 is_stmt 1 view .LVU47
  64:Core/Src/rcc.c ****     { 
 245              		.loc 1 64 9 is_stmt 0 view .LVU48
 246 0034 FFF7FEFF 		bl	GetTick
 247              	.LVL12:
  64:Core/Src/rcc.c ****     { 
 248              		.loc 1 64 19 view .LVU49
 249 0038 001B     		subs	r0, r0, r4
  64:Core/Src/rcc.c ****     { 
 250              		.loc 1 64 8 view .LVU50
 251 003a 6428     		cmp	r0, #100
 252 003c F5D9     		bls	.L18
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 40


 253              	.L19:
  71:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PLLMULL9_Msk); //PLL x 9, Freq sys = 8Mhz x 9 = 72
 254              		.loc 1 71 3 is_stmt 1 view .LVU51
 255 003e 154B     		ldr	r3, .L23+4
 256 0040 5A68     		ldr	r2, [r3, #4]
 257 0042 5A60     		str	r2, [r3, #4]
  72:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PLLSRC_Msk);   //PLL source HSE
 258              		.loc 1 72 3 view .LVU52
 259 0044 5A68     		ldr	r2, [r3, #4]
 260 0046 42F4E012 		orr	r2, r2, #1835008
 261 004a 5A60     		str	r2, [r3, #4]
  73:Core/Src/rcc.c **** 
 262              		.loc 1 73 3 view .LVU53
 263 004c 5A68     		ldr	r2, [r3, #4]
 264 004e 42F48032 		orr	r2, r2, #65536
 265 0052 5A60     		str	r2, [r3, #4]
  75:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PPRE1_DIV2);   //APB1 Prescaler = 2 
 266              		.loc 1 75 3 view .LVU54
 267 0054 5A68     		ldr	r2, [r3, #4]
 268 0056 5A60     		str	r2, [r3, #4]
  76:Core/Src/rcc.c ****   SET_BIT(RCC->CFGR, RCC_CFGR_PPRE2_DIV1);   //APB2 Prescaler = 1y
 269              		.loc 1 76 3 view .LVU55
 270 0058 5A68     		ldr	r2, [r3, #4]
 271 005a 42F48062 		orr	r2, r2, #1024
 272 005e 5A60     		str	r2, [r3, #4]
  77:Core/Src/rcc.c **** 
 273              		.loc 1 77 3 view .LVU56
 274 0060 5A68     		ldr	r2, [r3, #4]
 275 0062 5A60     		str	r2, [r3, #4]
  81:Core/Src/rcc.c ****   while(!READ_BIT(RCC->CR, RCC_CR_PLLRDY_Msk)); //waiting
 276              		.loc 1 81 3 view .LVU57
 277 0064 1A68     		ldr	r2, [r3]
 278 0066 42F08072 		orr	r2, r2, #16777216
 279 006a 1A60     		str	r2, [r3]
  82:Core/Src/rcc.c **** 
 280              		.loc 1 82 3 view .LVU58
 281              	.L21:
  82:Core/Src/rcc.c **** 
 282              		.loc 1 82 9 discriminator 1 view .LVU59
  82:Core/Src/rcc.c **** 
 283              		.loc 1 82 10 is_stmt 0 discriminator 1 view .LVU60
 284 006c 094B     		ldr	r3, .L23+4
 285 006e 1B68     		ldr	r3, [r3]
  82:Core/Src/rcc.c **** 
 286              		.loc 1 82 9 discriminator 1 view .LVU61
 287 0070 13F0007F 		tst	r3, #33554432
 288 0074 FAD0     		beq	.L21
  84:Core/Src/rcc.c **** 
 289              		.loc 1 84 3 is_stmt 1 view .LVU62
 290 0076 074A     		ldr	r2, .L23+4
 291 0078 5368     		ldr	r3, [r2, #4]
 292 007a 43F00203 		orr	r3, r3, #2
 293 007e 5360     		str	r3, [r2, #4]
  87:Core/Src/rcc.c ****   SysTickInit(AMNT_DIV);  /* Refresh of SysTick frequency */
 294              		.loc 1 87 3 view .LVU63
 295 0080 FFF7FEFF 		bl	SystemCoreClockUpdate
 296              	.LVL13:
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 41


  88:Core/Src/rcc.c **** }
 297              		.loc 1 88 3 view .LVU64
 298 0084 4FF47A70 		mov	r0, #1000
 299 0088 FFF7FEFF 		bl	SysTickInit
 300              	.LVL14:
  89:Core/Src/rcc.c **** 
 301              		.loc 1 89 1 is_stmt 0 view .LVU65
 302 008c 10BD     		pop	{r4, pc}
 303              	.LVL15:
 304              	.L24:
  89:Core/Src/rcc.c **** 
 305              		.loc 1 89 1 view .LVU66
 306 008e 00BF     		.align	2
 307              	.L23:
 308 0090 00200240 		.word	1073881088
 309 0094 00100240 		.word	1073876992
 310              		.cfi_endproc
 311              	.LFE66:
 313              		.section	.text.SuspendTick,"ax",%progbits
 314              		.align	1
 315              		.global	SuspendTick
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 320              	SuspendTick:
 321              	.LFB70:
 113:Core/Src/rcc.c **** 
 114:Core/Src/rcc.c **** 
 115:Core/Src/rcc.c **** void SuspendTick(void)
 116:Core/Src/rcc.c **** {
 322              		.loc 1 116 1 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 117:Core/Src/rcc.c ****   /* Disable SysTick Interrupt */
 118:Core/Src/rcc.c ****   CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 327              		.loc 1 118 3 view .LVU68
 328 0000 4FF0E022 		mov	r2, #-536813568
 329 0004 1369     		ldr	r3, [r2, #16]
 330 0006 23F00203 		bic	r3, r3, #2
 331 000a 1361     		str	r3, [r2, #16]
 119:Core/Src/rcc.c **** }
 332              		.loc 1 119 1 is_stmt 0 view .LVU69
 333 000c 7047     		bx	lr
 334              		.cfi_endproc
 335              	.LFE70:
 337              		.section	.text.ResumeTick,"ax",%progbits
 338              		.align	1
 339              		.global	ResumeTick
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 344              	ResumeTick:
 345              	.LFB71:
 120:Core/Src/rcc.c **** 
 121:Core/Src/rcc.c **** void ResumeTick(void)
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 42


 122:Core/Src/rcc.c **** {
 346              		.loc 1 122 1 is_stmt 1 view -0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 123:Core/Src/rcc.c ****   /* Enable SysTick Interrupt */
 124:Core/Src/rcc.c ****   SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 351              		.loc 1 124 3 view .LVU71
 352 0000 4FF0E022 		mov	r2, #-536813568
 353 0004 1369     		ldr	r3, [r2, #16]
 354 0006 43F00203 		orr	r3, r3, #2
 355 000a 1361     		str	r3, [r2, #16]
 125:Core/Src/rcc.c **** }
 356              		.loc 1 125 1 is_stmt 0 view .LVU72
 357 000c 7047     		bx	lr
 358              		.cfi_endproc
 359              	.LFE71:
 361              		.section	.text.Delay,"ax",%progbits
 362              		.align	1
 363              		.global	Delay
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 368              	Delay:
 369              	.LVL16:
 370              	.LFB72:
 126:Core/Src/rcc.c **** 
 127:Core/Src/rcc.c **** 
 128:Core/Src/rcc.c **** void Delay(uint32_t ms)
 129:Core/Src/rcc.c **** {
 371              		.loc 1 129 1 is_stmt 1 view -0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		.loc 1 129 1 is_stmt 0 view .LVU74
 376 0000 70B5     		push	{r4, r5, r6, lr}
 377              	.LCFI2:
 378              		.cfi_def_cfa_offset 16
 379              		.cfi_offset 4, -16
 380              		.cfi_offset 5, -12
 381              		.cfi_offset 6, -8
 382              		.cfi_offset 14, -4
 383 0002 0646     		mov	r6, r0
 130:Core/Src/rcc.c ****   /* Waiting for some delay in ms */
 131:Core/Src/rcc.c ****   uint32_t start = GetTick();
 384              		.loc 1 131 3 is_stmt 1 view .LVU75
 385              		.loc 1 131 20 is_stmt 0 view .LVU76
 386 0004 FFF7FEFF 		bl	GetTick
 387              	.LVL17:
 388              		.loc 1 131 20 view .LVU77
 389 0008 0546     		mov	r5, r0
 390              	.LVL18:
 132:Core/Src/rcc.c ****   while ((start + ms) > GetTick());
 391              		.loc 1 132 3 is_stmt 1 view .LVU78
 392              	.L28:
 393              		.loc 1 132 23 discriminator 1 view .LVU79
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 43


 394              		.loc 1 132 17 is_stmt 0 discriminator 1 view .LVU80
 395 000a AC19     		adds	r4, r5, r6
 396              		.loc 1 132 25 discriminator 1 view .LVU81
 397 000c FFF7FEFF 		bl	GetTick
 398              	.LVL19:
 399              		.loc 1 132 23 discriminator 1 view .LVU82
 400 0010 8442     		cmp	r4, r0
 401 0012 FAD8     		bhi	.L28
 133:Core/Src/rcc.c **** }...
 402              		.loc 1 133 1 view .LVU83
 403 0014 70BD     		pop	{r4, r5, r6, pc}
 404              		.loc 1 133 1 view .LVU84
 405              		.cfi_endproc
 406              	.LFE72:
 408              		.global	Ticks
 409              		.section	.bss.Ticks,"aw",%nobits
 410              		.align	2
 413              	Ticks:
 414 0000 00000000 		.space	4
 415              		.text
 416              	.Letext0:
 417              		.file 3 "Core/Inc/stm32f103xb.h"
 418              		.file 4 "c:\\users\\mark\\scoop\\apps\\gcc-arm-none-eabi\\current\\arm-none-eabi\\include\\machine
 419              		.file 5 "c:\\users\\mark\\scoop\\apps\\gcc-arm-none-eabi\\current\\arm-none-eabi\\include\\sys\\_s
 420              		.file 6 "Core/Inc/system.h"
ARM GAS  C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s 			page 44


DEFINED SYMBOLS
                            *ABS*:00000000 rcc.c
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:19     .text.RCC_LED:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:25     .text.RCC_LED:00000000 RCC_LED
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:42     .text.RCC_LED:0000000c $d
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:47     .text.SysTickInit:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:53     .text.SysTickInit:00000000 SysTickInit
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:132    .text.SysTickInit:00000034 $d
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:139    .text.IncTick:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:145    .text.IncTick:00000000 IncTick
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:163    .text.IncTick:0000000c $d
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:413    .bss.Ticks:00000000 Ticks
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:168    .text.GetTick:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:174    .text.GetTick:00000000 GetTick
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:190    .text.GetTick:00000008 $d
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:195    .text.SystemClockConfig:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:201    .text.SystemClockConfig:00000000 SystemClockConfig
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:308    .text.SystemClockConfig:00000090 $d
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:314    .text.SuspendTick:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:320    .text.SuspendTick:00000000 SuspendTick
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:338    .text.ResumeTick:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:344    .text.ResumeTick:00000000 ResumeTick
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:362    .text.Delay:00000000 $t
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:368    .text.Delay:00000000 Delay
C:\Users\Mark\AppData\Local\Temp\ccyKA3dz.s:410    .bss.Ticks:00000000 $d

UNDEFINED SYMBOLS
UsageFault_Handler
SystemCoreClock
SystemCoreClockUpdate
